/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

//import fuentes.Tokens;
//import dk.brics.automaton.RegExp;
//import dk.brics.automaton.Automaton;
import Interfaz.Lexer;
import fuentes.SimuladorArbolBinario;
import fuentes.Symbol;
import fuentes.parser;
import fuentes.scanner;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import static java.awt.SystemColor.menu;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.io.BufferedWriter;
import javax.swing.Icon;
import static javax.swing.JOptionPane.showMessageDialog;

import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.table.DefaultTableModel;
import java.awt.Image;
import java.awt.Rectangle;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;

/**
 *
 * 
 Inicio;
5+5+5/2*3 > 52 && 32 < 82-42/5^3
Funcion Automata {
}

si(a>5.5 || b < 42){
	Entero a,b;
	a= 55;
}

si( b==c && c != d){
	Entero x = 5;
	a= b*x;
}sino{
	a = 0;
}

Fin;

 * @author Luis
 */
public class Interfaz_c3d extends javax.swing.JFrame {
    
    private SimuladorArbolBinario simulador = new SimuladorArbolBinario();
    /**
     * Creates new form Interfaz_C3D
     */
    private PanelColores codigo;
    
    
    DefaultTableModel tokens;
    DefaultTableModel tOperaciones;
    DefaultTableModel tAutomatasError;
    DefaultTableModel tAutomatasCorrectos;
    JFileChooser seleccionar = new JFileChooser();
    FileOutputStream salida;
    FileInputStream entradaArch;
    
    File archivo;
    public Interfaz_c3d() {
        initComponents();
        consola.setEditable(false);
        txtGramaticas.setEditable(false);
        txtCodMaquina.setEditable(false);
        jTabbedPane3.remove(3);
        this.setLocationRelativeTo(null);
        cerrar();
        //rutas = new String[]{};
       LineasText tmpL = new LineasText();
//       entrada=tmpL.text_pane;
       codigo=new PanelColores();
       
       posicionPuntero(tmpL);
       JPanel tmpP = new JPanel(new BorderLayout());
       tmpP.add(tmpL,BorderLayout.WEST);
       tmpP.add(tmpL.scrollPane,BorderLayout.CENTER);
//       tabs.addTab("Consola",tmpP);
       pnlCodigo.add(codigo);
       tokens = (DefaultTableModel) tbtokens.getModel();
        tokens.addColumn("No.Linea");
        tokens.addColumn("Lexema");
        tokens.addColumn("Comp_Lexico");
        Font font = new Font("Consolas", Font.PLAIN, 14);
        PanelColores.txt.setFont(font);
        tOperaciones = (DefaultTableModel) tboperaciones.getModel();
        tOperaciones.addColumn("OperaciÃ³n");
        tAutomatasError = (DefaultTableModel) tbAutomatasErr.getModel();
        tAutomatasError.addColumn("Automatas");
        tAutomatasCorrectos = (DefaultTableModel) tbAutomatasCorr.getModel();
        tAutomatasCorrectos.addColumn("Automatas");
         
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Automata = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbtokens = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtGramaticas = new javax.swing.JTextArea();
        panelBoton = new javax.swing.JPanel();
        panelDibuj = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtCodMaquina = new javax.swing.JTextPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tbAutomatasCorr = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        errores = new javax.swing.JTextArea();
        panelDinError = new javax.swing.JPanel();
        panelAutomatas1 = new javax.swing.JPanel();
        panelAutomatasErr = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbAutomatasErr = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_expresion = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        txt_Automata = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        txt_AutomataCorrecto = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        tboperaciones = new javax.swing.JTable();
        pnlCodigo = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        generar = new javax.swing.JMenuItem();
        generar1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 255, 204));

        jPanel1.setBackground(new java.awt.Color(33, 44, 112));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1080));

        Automata.setBackground(new java.awt.Color(255, 255, 255));
        Automata.setName(""); // NOI18N

        consola.setColumns(20);
        consola.setRows(5);
        jScrollPane5.setViewportView(consola);

        Automata.addTab("Codigo Intermedio", jScrollPane5);

        tbtokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbtokens);

        Automata.addTab("Tabla Tokens(AL)", jScrollPane1);

        txtGramaticas.setColumns(20);
        txtGramaticas.setRows(5);
        jScrollPane6.setViewportView(txtGramaticas);

        Automata.addTab("Gramaticas", jScrollPane6);

        javax.swing.GroupLayout panelDibujLayout = new javax.swing.GroupLayout(panelDibuj);
        panelDibuj.setLayout(panelDibujLayout);
        panelDibujLayout.setHorizontalGroup(
            panelDibujLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        panelDibujLayout.setVerticalGroup(
            panelDibujLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelBotonLayout = new javax.swing.GroupLayout(panelBoton);
        panelBoton.setLayout(panelBotonLayout);
        panelBotonLayout.setHorizontalGroup(
            panelBotonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDibuj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelBotonLayout.setVerticalGroup(
            panelBotonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(panelDibuj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        Automata.addTab("Dibujo", panelBoton);

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jInternalFrame2.setVisible(true);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        jDesktopPane1.setLayer(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jInternalFrame2)
                .addGap(45, 45, 45))
        );

        Automata.addTab("Ãrboles", jDesktopPane1);

        jScrollPane11.setViewportView(txtCodMaquina);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        Automata.addTab("Codigo Maquina", jPanel4);

        jTabbedPane3.setBackground(new java.awt.Color(102, 0, 51));

        tbAutomatasCorr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane10.setViewportView(tbAutomatasCorr);

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton1.setText("Generar Automata");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(404, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Automatas correctos", jPanel3);

        errores.setBackground(new java.awt.Color(102, 102, 102));
        errores.setColumns(20);
        errores.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        errores.setForeground(new java.awt.Color(255, 255, 255));
        errores.setLineWrap(true);
        errores.setRows(5);
        errores.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        errores.setEnabled(false);
        jScrollPane3.setViewportView(errores);

        jTabbedPane3.addTab("Salida", jScrollPane3);

        panelDinError.setLayout(new java.awt.GridLayout(0, 1));

        tbAutomatasErr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tbAutomatasErr);

        javax.swing.GroupLayout panelAutomatasErrLayout = new javax.swing.GroupLayout(panelAutomatasErr);
        panelAutomatasErr.setLayout(panelAutomatasErrLayout);
        panelAutomatasErrLayout.setHorizontalGroup(
            panelAutomatasErrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutomatasErrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelAutomatasErrLayout.setVerticalGroup(
            panelAutomatasErrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutomatasErrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton3.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jButton3.setText("Generar autÃ³mata");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAutomatas1Layout = new javax.swing.GroupLayout(panelAutomatas1);
        panelAutomatas1.setLayout(panelAutomatas1Layout);
        panelAutomatas1Layout.setHorizontalGroup(
            panelAutomatas1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutomatas1Layout.createSequentialGroup()
                .addGroup(panelAutomatas1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAutomatasErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAutomatas1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        panelAutomatas1Layout.setVerticalGroup(
            panelAutomatas1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAutomatas1Layout.createSequentialGroup()
                .addComponent(panelAutomatasErr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(0, 387, Short.MAX_VALUE))
        );

        panelDinError.add(panelAutomatas1);

        jTabbedPane3.addTab("Automatas de Err", panelDinError);

        txt_expresion.setColumns(20);
        txt_expresion.setRows(5);
        jScrollPane2.setViewportView(txt_expresion);

        txt_Automata.setColumns(20);
        txt_Automata.setRows(5);
        jScrollPane8.setViewportView(txt_Automata);

        txt_AutomataCorrecto.setColumns(20);
        txt_AutomataCorrecto.setRows(5);
        jScrollPane9.setViewportView(txt_AutomataCorrecto);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(364, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab(".", jPanel2);

        tboperaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tboperaciones);

        jTabbedPane3.addTab("Tabla operaciones", jScrollPane4);

        pnlCodigo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        pnlCodigo.setPreferredSize(new java.awt.Dimension(607, 100));

        javax.swing.GroupLayout pnlCodigoLayout = new javax.swing.GroupLayout(pnlCodigo);
        pnlCodigo.setLayout(pnlCodigoLayout);
        pnlCodigoLayout.setHorizontalGroup(
            pnlCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );
        pnlCodigoLayout.setVerticalGroup(
            pnlCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo MA 150x161 LB.png"))); // NOI18N

        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jButton2.setText("Generar Ã¡rbol");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(132, 132, 132))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(Automata, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(Automata, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jButton2)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Automata.getAccessibleContext().setAccessibleName("Salida\n");

        jMenuBar1.setBackground(new java.awt.Color(102, 0, 51));

        jMenu1.setText("Archivo");

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/agregar-documentos.png"))); // NOI18N
        jMenuItem2.setText("Nuevo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abrir-documento.png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/expediente.png"))); // NOI18N
        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guardar.png"))); // NOI18N
        jMenuItem4.setText("Guardar como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout.png"))); // NOI18N
        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ejecutar");

        generar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/video.png"))); // NOI18N
        generar.setText("Compilar");
        generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarActionPerformed(evt);
            }
        });
        jMenu2.add(generar);

        generar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analisisCod.png"))); // NOI18N
        generar1.setText("Analizar");
        generar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generar1ActionPerformed(evt);
            }
        });
        jMenu2.add(generar1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1042, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//----
    
   


  
    
   
     private void analizarLexico() throws IOException {
       
        
        int cont = 1;
        String expr = (String) PanelColores.txt.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                //txtAnalizarLex.setText(resultado);
                return;
            }
            System.out.print(token);
            switch (token) {
                case Linea:
                    cont++;
                    break;
                case alfabeto:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case automata:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
               case boleano:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case elemento:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case caracter:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case conjunto:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case entero:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estado:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case expre:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case fin:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case flotante:
                     cont++;
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case grafico:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case inicio:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case mostrar:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case nuevo:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case funcion:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case validar:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case con:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case afd:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
               case afn:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estadofinal:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case estadoinicial:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case hacer:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case hacia:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case mientras:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case er:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
               
                case Mostrartabla:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                case ordenprincipal:
                      tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                  break;
                    //----------
                case Comillas:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Comillas"});
                    break;
                case cadena:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Tipo de dato"});
                    break;
                case T_dato:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Tipo de dato"});
                     break;
                case If:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Else:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Do:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case While:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case For:
                    tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case Igual:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador igual"});
                    break;
                case Suma:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador suma"});
                    break;
                case Resta:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador resta"});
                    break;
                case Multiplicacion:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador multiplicacion"});
                    break;
                case Division:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador division"});
                    break;
                case Op_logico:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador logico"});
                    break;
                case Op_incremento:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador incremento"});
                    break;
                case Op_relacional:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador relacional"});
                    break;
                case Op_atribucion:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador atribucion"});
                    break;
                case Op_booleano:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Operador booleano"});
                    break;
                case Parentesis_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Parentesis apertura"});
                    break;
                case Parentesis_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Parentesis de cierre"});
                    break;
                case Llave_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Llave de apertura"});
                    break;
                case Llave_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Llave de cierre"});
                    break;
                case Corchete_a:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"corchete de apertura"});
                    break;
                case Corchete_c:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"corchete de cierre"});
                    break;
                case Main:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Palabra reservada"});
                    break;
                case P_coma:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Punto y coma"});
                    break;
                case Identificador:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Identificador"});
                    break;
                case Numero:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Numero"});
                    break;
                case ERROR:
                     tokens.addRow(new Object [] {cont,lexer.lexeme,"Simbolo no definido"});
                    break;
                default:
                    resultado += "  < " + lexer.lexeme + " >\n";

                    
                    break;
            }
        }
    }
    
//----
    private void generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarActionPerformed
        this.jDesktopPane1.removeAll();
        Rectangle tamaÃ±o = this.jInternalFrame2.getBounds();
        this.jInternalFrame2 = null;
        this.jInternalFrame2 = new JInternalFrame("RepresentaciÃ³n grÃ¡fica", true);
        this.jDesktopPane1.add(this.jInternalFrame2, JLayeredPane.DEFAULT_LAYER);
        this.jInternalFrame2.setVisible(true);
        this.jInternalFrame2.setBounds(tamaÃ±o);
        this.jInternalFrame2.setEnabled(false);
        txt_expresion.setText("");
        txt_Automata.setText("");
        txt_AutomataCorrecto.setText("");
        tOperaciones.setRowCount(0);
        tAutomatasError.setRowCount(0);
        tAutomatasCorrectos.setRowCount(0);
        errores.setText("");
        consola.setText("");
//        txtCodMaquina.setText("");
        txtGramaticas.setText("");
        cadena="";
        cadena2="";
        //agregamo las clases de los analizadores que se crean con jflex y cup
        String texto = PanelColores.txt.getText();
        if(texto.isEmpty()){
            System.err.println("No es posible evaluar una cadena en blanco.");
            return;
        }
        try {
            notificar_er("-----------Analisis iniciado-----------");
            lexico();
            System.out.println("Inicia la generaciÃ³n de C3D...");
            scanner scan = new scanner(new BufferedReader( new StringReader(texto)));
            parser parser = new parser(scan);
            parser.parse();
            notificar_er("----------Analisis finalizado----------");
            consola.append(cadena+"\n");
            txtGramaticas.append(cadena2+"");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        //Algoritmo para preparar cÃ³digo binario
        String codigoBinario = "";//guarda el en binario
        for (int i = 0; i < texto.length(); i++) {//recorre el texto ingresado
            char letra = texto.charAt(i);//separa letra a letra
            /* si el binario de la letra es menor a 8 bit entonces se le agrega
             un cero a la izquierda para llenar el bit restante*/
            int aux = Binario((int) (letra)).length();//almacena largo del binario de la letra devuelta
            for (int j = 0; j < 8; j++) {//recorrido de 8 characteres
                if (aux < 8) {//si el largo del binario es menor a 7 (0-7)entonces
                    codigoBinario = codigoBinario + "0";//agregar 0 a la concadenacion
                    aux++;//aumentar el largo del binario
                }
            }
            /*se concatena el binario de cada letra separado por un espacio. al metodo binario
             se le pasa por parametro el decimal correspondiente a cada letra*/
            codigoBinario = codigoBinario + Binario((int) (letra)) + " "+"\n";
        }
       // txtCodMaquina.setText(codigoBinario);/*imprime el codigo binario completo*/
       
       //LLENAR TABLA PARA OPERACIONES BÃSICAS
       
       String cadena = txt_expresion.getText();
       String array [] = cadena.split("\\r?\\n");
        for(int i=0; i<array.length; i++){
            String cad=array[i];
            tOperaciones.addRow(new Object [] {cad});
        }
        
        //LLENAR TABLA PARA AUTOMATAS CON ERROR
        String cadAutomata = txt_Automata.getText();
        String rutas [] = cadAutomata.split("\\r?\\n");
        for(int i=0; i<rutas.length; i++){
            //String cad=array[i];
            String cadAuto = rutas[i];
            tAutomatasError.addRow(new Object [] {cadAuto});
        }
        
        //LLENAR TABLA PARA AUTOMATAS CON ERROR
        String cadAutomataCorr = txt_AutomataCorrecto.getText();
        String rutasCorr [] = cadAutomataCorr.split("\\r?\\n");
        for(int i=0; i<rutasCorr.length; i++){
            String cadAutoCorr = rutasCorr[i];
            tAutomatasCorrectos.addRow(new Object [] {cadAutoCorr});
        }
        
        
    }//GEN-LAST:event_generarActionPerformed
    
    //Generar cÃ³digo binario (0's y 1's)
    private String Binario(int Decimal) {
        int R, x = 0;//variables que se implementaran
        String Binario = ""; //guarda el contenido en codigo binario
        R = Decimal % 2;//resto del parametro 
        if (R == 1) {//si el resto es 1
            while (Decimal > 1) {//si el parametro es mas grande q el resto
                Decimal /= 2;//entonces decimal se divide en 2 y se guarda en decimal
                x = Decimal % 2;//x contendra el resto del decimal
                Binario = String.valueOf(x + Binario);//binario se ira formando de forma correcta y no alreves
            }
        } else {//si resto no es 1
            while (Decimal > 0) {//y decimal es mayor a 0
                Decimal /= 2;//decimal se divide en 2
                x = Decimal % 2;//x contendra el resto del decimal resultante
                Binario = String.valueOf(x + Binario);//se forma el numero en binario de forma correcta
            }
        }
        return String.valueOf(Binario + x);//devuelve el binario resultante mas el ultimo bit
    }
    
    public void lexico(){
        errores.setText("");
         tokens.setRowCount(0);  
        if(PanelColores.txt.getText().equals("")){
            showMessageDialog(null,"No hay cÃ³digo para analizar.","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else{
           try{
               analizarLexico();
                Lexer lex = new Lexer(new BufferedReader(new StringReader(PanelColores.txt.getText())));
           }catch(IOException ex){
              Logger.getLogger(Interfaz_c3d.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
    }

    private void generar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generar1ActionPerformed
         errores.setText("");
         tokens.setRowCount(0);  
        if(PanelColores.txt.getText().equals("")){
            showMessageDialog(null,"No hay cÃ³digo para analizar.","ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else{
           try{
               analizarLexico();
                Lexer lex = new Lexer(new BufferedReader(new StringReader(PanelColores.txt.getText())));
           }catch(IOException ex){
              Logger.getLogger(Interfaz_c3d.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
    }//GEN-LAST:event_generar1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        PanelColores.txt.setText("");
        tokens.setRowCount(0);
        errores.setText("");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(seleccionar.showDialog(null, "Abrir") == JFileChooser.APPROVE_OPTION){
            try{
              archivo = seleccionar.getSelectedFile();
              if(archivo.canRead()){
                  if(archivo.getName().endsWith("ma")){
                      String documento = abrirArchivo(archivo);
                      PanelColores.txt.setText(documento);
                  }
                  else{
                    showMessageDialog(null,"No se pudo abrir el archivo seleccionado, /nla extensiÃ³n del archivo no es .ma","ERROR",JOptionPane.ERROR_MESSAGE);
                  }
              }
            }catch(Exception ex){}
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.getName().endsWith("ma")){
                String documento = PanelColores.txt.getText();
                String mensaje = guardarArchivo(archivo, documento);
                if(mensaje != null){
                    showMessageDialog(null,mensaje,"EXITO",JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    showMessageDialog(null,"No se pudo guardar el archivo","ERROR",JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                showMessageDialog(null,"Solo se permiten archivos con extensiÃ³n .ma","ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        guardarArchivo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed
       
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            //jInternalFrame2.removeAll();
            int filaSeleccionada2 = tboperaciones.getSelectedRow();
            String cadFinal = tboperaciones.getValueAt(filaSeleccionada2,0)+"";
            if(this.simulador.insertar(cadFinal)){
            //JOptionPane.showMessageDialog(null, "La expresiÃ³n se inserto correctamente", "Exito", 1);
            this.repintarArbol();
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "La expresiÃ³n no se pudo insertar", "Error", 0);

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            try{
            mostrarAutomata ma = new mostrarAutomata();
            int filaSeleccionada2 = tbAutomatasErr.getSelectedRow();
            String cadFinal = tbAutomatasErr.getValueAt(filaSeleccionada2,0)+"";
            Imagen.getruta(cadFinal);
            ma.panelMostrarAutoErr2.removeAll();
            ma.panelMostrarAutoErr2.repaint();
            Imagen im = new Imagen(ma.panelMostrarAutoErr2);
            ma.panelMostrarAutoErr2.add(im).repaint();
           //JOptionPane.showMessageDialog(null, "El automata se dibujo correctamente", "Exito", 1);
            ma.setVisible(true);
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "El automata no se pudo dibujar", "Error", 0);

        }
        //System.out.print(indice+"-" +rutas[indice]);
        
//        Imagen.getruta(rutas[indice-1]);
//        panelAutomatasErr.removeAll();
//        panelAutomatasErr.repaint();
//        Imagen i = new Imagen(panelAutomatasErr);
//        panelAutomatasErr.add(i).repaint(); 
//        indice--;
//        if (indice==0){
//            indice=rutas.length;}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            mostrarAutomataCorrecto mac = new mostrarAutomataCorrecto();
            int filaSeleccionada2 = tbAutomatasCorr.getSelectedRow();
            String cadFinal = tbAutomatasCorr.getValueAt(filaSeleccionada2,0)+"";
            Imagen.getruta(cadFinal);
            mac.panelMostrarAutoCorr.removeAll();
            mac.panelMostrarAutoCorr.repaint();
            Imagen im = new Imagen(mac.panelMostrarAutoCorr);
            mac.panelMostrarAutoCorr.add(im).repaint();
            //JOptionPane.showMessageDialog(null, "El automata se dibujo correctamente", "Exito", 1);
            mac.setVisible(true);
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "El automata no se pudo dibujar", "Error", 0);

        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void repintarArbol() {
        this.jDesktopPane1.removeAll();
        Rectangle tamaÃ±o = this.jInternalFrame2.getBounds();
        this.jInternalFrame2 = null;
        this.jInternalFrame2 = new JInternalFrame("RepresentaciÃ³n grÃ¡fica", true);
        this.jDesktopPane1.add(this.jInternalFrame2, JLayeredPane.DEFAULT_LAYER);
        this.jInternalFrame2.setVisible(true);
        this.jInternalFrame2.setBounds(tamaÃ±o);
        this.jInternalFrame2.setEnabled(false);
        this.jInternalFrame2.add(this.simulador.getDibujo(), BorderLayout.CENTER);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz_c3d.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz_c3d().setVisible(true);
                jTabbedPane3.setSelectedIndex(1);
                Automata.setSelectedIndex(1);
            }
        });
    }
    
    //ValidaciÃ³n al cerrar la ventana
    public void cerrar(){
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter(){
               public void windowClosing(WindowEvent e) {
                   confirmarSalida();
               }
            });
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void confirmarSalida(){
        int valor= JOptionPane.showConfirmDialog(this,"Â¿EstÃ¡s seguro que deseas salir? \nSe perderÃ¡n todos los cambios realizados.", "Salir...",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (valor==JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }
    //MANEJO DE ARCHIVOS
    //GUARDAR ARCHIVO
    public String guardarArchivo(File archivo, String documento){
        String mensaje = null;
        try{
            salida = new FileOutputStream(archivo);
            byte [] bytxt = documento.getBytes();
            salida.write(bytxt);
            mensaje = "El archivo se ha guard                                             ado exitosamente";
            
        }catch(Exception ex){
            
        }
        return mensaje;
    }
    
    //FunciÃ³n guardarArchivo
    public void guardarArchivo(){
        if(seleccionar.showDialog(null, "Guardar como") == JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.getName().endsWith("ma")){
                String documento = PanelColores.txt.getText();
                String mensaje = guardarArchivo(archivo, documento);
                if(mensaje != null){
                    showMessageDialog(null,mensaje,"EXITO",JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    showMessageDialog(null,"No se pudo guardar el archivo, \nsolo se permiten archivos con extensiÃ³n .ma","ERROR",JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                showMessageDialog(null,"Solo se permiten archivos con extensiÃ³n .lpg","ERROR",JOptionPane.ERROR_MESSAGE);
                
            }
        }
    }
    
    //ABRIR ARCHIVO
    public String abrirArchivo(File archivo){
        String documento = "";
        try{
            entradaArch = new FileInputStream(archivo);
            int ascci;
            while((ascci = entradaArch.read()) != -1){
                char caracter = (char) ascci;
                documento +=caracter;
            }
        }catch(Exception ex){
        }
        return documento;
    }
    
    private void posicionPuntero(LineasText lines){
        lines.text_pane.addCaretListener(new CaretListener(){
            
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
		int fila = 1, columna=0;
		int ultimalinea=-1;
		String text =lines.text_pane.getText().replaceAll("\r","");
				
		for(int i=0;i<pos;i++){
                    if(text.charAt(i)==10){
                        fila++;
                        ultimalinea=i;
                    }
                }
				
		columna=pos-ultimalinea;                
            }
        });
    }
    static String cadena="";
    public static void notificar(String cad){
        consola.append(cad+"\n");
    }
    
    public static void notificar_er(String cad){
        errores.append(cad+"\n");
    }
    
    public static void notificarCM(String cad){
        
       txtCodMaquina.setText(cad);
       
        
    }
    static String cadena2="";
    public static void notificarG(String cad){
        cadena2=cad+cadena2;
        
    }
    
    public static  void notificarImgAC(){
        panelDibuj.removeAll();
        panelDibuj.repaint();
        ImagenAC im = new ImagenAC(panelDibuj);
        panelDibuj.add(im).repaint();
//                panelAutomatas.add(im).repaint();
    }
//    public static void notificarEXP(String cad){
//        
//        String texto1;
//
//int valido;
//texto1=cad;
//System.out.println(texto1);
//valido= validar(texto1);
//	if(texto1=="*"){
//	valido=4;
//		}
//		if(valido==1)
//			{
//			try{
//			
//			System.out.println("valido");
////			RegExp r=new RegExp(texto1);
////			Automaton a=r.toAutomaton();
//			txtCodMaquina.setText(a.toDot());	
//			try{
//			creartxt(a.toDot());
//			}catch(IOException ex){
//				Logger.getLogger(Interfaz_c3d.class.getName()).log(Level.SEVERE,null,ex);
//			}
//			dibujar("archivo.txt","png.png");
//			//mostrar();
//		}catch(Exception e){
//			System.out.println("invalido");
//		}  
//		
//        
//    }
//    }
   public static boolean verifica(String expe,String verificar){
	return Pattern.matches(expe,verificar);
   }
public static int evaluar(char le){
if(((int)le>=97)&&((int)le<=122)){
	return 1;
	}
if(((int)le>=48)&&((int)le<=43)){
	return 1;
	}
if((int)le==124){
	return 1;
	}
return 0;

}

public static int validar(String text){
for(int n=0; n<text.length(); n++){
	char c= text.charAt(n);
	int si=evaluar(c);
	if(si==0){
	return 0;
	         }
	}
return 1;
}

public static void creartxt(String aux) throws IOException{
	String ruta="archivo.txt";
	File archivo=new File(ruta);
	BufferedWriter bw;
	if(archivo.exists()){
            bw= new BufferedWriter(new FileWriter(archivo));
	bw.write(aux);}
		else{
	bw= new BufferedWriter(new FileWriter(archivo));
	bw.write(aux);
	}
	bw.close();
		
}
//public static void mostrar()
//{
//	ImageIcon fot=new ImageIcon("png.png");
//	Icon icono=new ImageIcon(fot.getImage().getScaledInstance(jLabel.getWidth(),jLabel.getHeight(),Image.SCALE_DEFAULT));
//	jLabel.setIcon(icono);
//	jLabel.repaint(); 
//}

public static void dibujar(String direccionDot,String direccionPng){
	try{
		ProcessBuilder pbuilder;
		pbuilder= new ProcessBuilder("dot", "-Tpng","-o",direccionPng,direccionDot);
		pbuilder.redirectErrorStream(true);
		pbuilder.start();
	}catch(Exception e){
		e.printStackTrace();
	}
	
}




//private void JButton1ActionPerformed(){
//jButton2.setEnabled(true)

//}


 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTabbedPane Automata;
    private static javax.swing.JTextArea consola;
    private static javax.swing.JTextArea errores;
    private javax.swing.JMenuItem generar;
    private javax.swing.JMenuItem generar1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JDesktopPane jDesktopPane1;
    public static javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private static javax.swing.JTabbedPane jTabbedPane3;
    private static javax.swing.JPanel panelAutomatas1;
    private static javax.swing.JPanel panelAutomatasErr;
    private javax.swing.JPanel panelBoton;
    private static javax.swing.JPanel panelDibuj;
    private static javax.swing.JPanel panelDinError;
    private javax.swing.JPanel pnlCodigo;
    private javax.swing.JTable tbAutomatasCorr;
    private javax.swing.JTable tbAutomatasErr;
    private javax.swing.JTable tboperaciones;
    private javax.swing.JTable tbtokens;
    private static javax.swing.JTextPane txtCodMaquina;
    private static javax.swing.JTextArea txtGramaticas;
    public static javax.swing.JTextArea txt_Automata;
    public static javax.swing.JTextArea txt_AutomataCorrecto;
    public static javax.swing.JTextArea txt_expresion;
    // End of variables declaration//GEN-END:variables

   
}
