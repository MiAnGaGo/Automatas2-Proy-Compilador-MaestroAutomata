/* The following code was generated by JFlex 1.6.1 */

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;

//Scanner para generar C3D


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/fuentes/lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\104\1\105\1\106\1\104\1\104\22\0\1\104\1\21\4\0"+
    "\1\22\1\0\1\1\1\2\1\14\1\11\1\5\1\12\1\51\1\15"+
    "\12\50\1\7\1\6\1\17\1\10\1\20\2\0\1\31\1\34\1\30"+
    "\1\41\1\23\1\33\1\45\1\47\1\102\1\37\1\103\1\32\1\36"+
    "\1\24\1\27\1\43\1\103\1\26\1\101\1\25\1\35\1\46\1\103"+
    "\1\42\2\103\3\0\1\16\1\100\1\0\1\61\1\64\1\60\1\71"+
    "\1\53\1\63\1\75\1\77\1\74\1\67\1\52\1\62\1\66\1\54"+
    "\1\57\1\73\1\52\1\56\1\70\1\55\1\65\1\76\1\52\1\72"+
    "\2\52\1\3\1\13\1\4\7\0\1\106\252\0\2\44\115\0\1\40"+
    "\u1ea8\0\1\106\1\106\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\1\13\23\1\1\2\23\1\1"+
    "\3\23\1\24\1\25\24\23\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\0\1\42\17\0\1\43\7\0\1\44\1\42\22\44"+
    "\1\43\6\44\10\0\1\45\6\0\1\46\15\0\1\47"+
    "\10\44\1\45\6\44\1\46\15\44\13\0\1\50\10\0"+
    "\1\51\2\0\1\52\6\0\13\44\1\50\10\44\1\51"+
    "\2\44\1\52\6\44\2\0\1\53\1\54\1\0\1\55"+
    "\2\0\1\56\20\0\1\57\1\60\1\61\3\44\1\53"+
    "\1\54\1\55\2\44\1\56\20\44\1\57\1\60\1\61"+
    "\1\62\2\0\1\63\20\0\1\64\2\0\1\62\1\63"+
    "\22\44\1\64\2\44\1\65\3\0\1\66\7\0\1\67"+
    "\1\0\1\70\2\0\1\71\1\72\1\73\1\74\1\44"+
    "\1\65\2\44\1\66\7\44\1\67\1\44\1\70\2\44"+
    "\1\71\1\72\1\73\1\74\6\0\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\0\1\103\1\0\6\44\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\44\1\103\1\44"+
    "\2\0\1\104\2\0\1\105\2\0\1\104\4\44\1\105"+
    "\2\44\2\0\1\106\3\0\2\44\1\106\3\44\4\0"+
    "\1\107\4\44\1\107\3\0\1\110\3\44\1\110\1\0"+
    "\1\111\1\0\1\44\1\111\1\44\1\112\1\113\1\112"+
    "\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\216\0\325\0\u011c\0\u0163\0\107\0\107\0\107"+
    "\0\u01aa\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\107"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\u0d97\0\u0dde\0\u0e25\0\u04b7\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u080b\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\107\0\u202c\0\u2073"+
    "\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u1486\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u14cd\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\107\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\107\0\u30d0\0\u3117"+
    "\0\107\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u14cd\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u14cd\0\u384d\0\u3894\0\u14cd\0\u38db"+
    "\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\107"+
    "\0\107\0\u3b13\0\107\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae"+
    "\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\107\0\107"+
    "\0\107\0\u409f\0\u40e6\0\u412d\0\u14cd\0\u14cd\0\u14cd\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac"+
    "\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4"+
    "\0\u462b\0\u4672\0\u14cd\0\u14cd\0\u14cd\0\107\0\u46b9\0\u4700"+
    "\0\107\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1"+
    "\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29"+
    "\0\u4b70\0\107\0\u4bb7\0\u4bfe\0\u14cd\0\u14cd\0\u4c45\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u14cd\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\107"+
    "\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\107"+
    "\0\u54de\0\u5525\0\u556c\0\u55b3\0\107\0\107\0\107\0\107"+
    "\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u14cd\0\u5716\0\u575d\0\u57a4"+
    "\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u14cd\0\u5907\0\u594e\0\u5995"+
    "\0\u59dc\0\u14cd\0\u14cd\0\u14cd\0\u14cd\0\u5a23\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u5b3f\0\u5b86\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\u5bcd\0\107\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30"+
    "\0\u5d77\0\u5dbe\0\u14cd\0\u14cd\0\u14cd\0\u14cd\0\u14cd\0\u14cd"+
    "\0\u5e05\0\u14cd\0\u5e4c\0\u5e93\0\u5eda\0\107\0\u5f21\0\u5f68"+
    "\0\107\0\u5faf\0\u5ff6\0\u14cd\0\u603d\0\u6084\0\u60cb\0\u6112"+
    "\0\u14cd\0\u6159\0\u61a0\0\u61e7\0\u622e\0\107\0\u6275\0\u62bc"+
    "\0\u6303\0\u634a\0\u6391\0\u14cd\0\u63d8\0\u641f\0\u6466\0\u64ad"+
    "\0\u64f4\0\u653b\0\u6582\0\107\0\u65c9\0\u6610\0\u6657\0\u669e"+
    "\0\u14cd\0\u66e5\0\u672c\0\u6773\0\107\0\u67ba\0\u6801\0\u6848"+
    "\0\u14cd\0\u688f\0\107\0\u68d6\0\u691d\0\u14cd\0\u6964\0\107"+
    "\0\107\0\u14cd\0\u14cd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\34\1\37\1\34"+
    "\1\40\1\41\1\34\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\51\1\61\1\62\1\51\1\63\1\51"+
    "\1\64\1\65\1\51\1\66\1\67\1\70\1\71\1\72"+
    "\1\2\1\73\1\74\1\34\1\75\1\76\120\0\1\77"+
    "\107\0\1\100\107\0\1\101\107\0\1\102\103\0\1\103"+
    "\106\0\1\104\106\0\1\105\10\0\1\106\1\107\106\0"+
    "\1\110\110\0\1\111\13\0\1\112\1\0\1\113\5\0"+
    "\1\114\3\0\1\111\13\0\1\112\1\0\1\113\6\0"+
    "\1\112\42\0\1\115\12\0\1\114\14\0\1\115\47\0"+
    "\1\116\21\0\1\114\5\0\1\116\53\0\1\117\24\0"+
    "\1\114\2\0\1\117\61\0\1\120\21\0\1\114\5\0"+
    "\1\120\57\0\1\121\1\0\1\122\16\0\1\114\6\0"+
    "\1\121\1\0\1\122\57\0\1\123\2\0\1\124\12\0"+
    "\1\114\11\0\1\123\2\0\1\124\71\0\1\114\70\0"+
    "\1\125\2\0\1\126\6\0\1\127\3\0\1\114\11\0"+
    "\1\125\2\0\1\126\6\0\1\127\5\0\1\127\33\0"+
    "\1\130\20\0\1\114\6\0\1\130\56\0\1\131\14\0"+
    "\1\132\3\0\1\114\6\0\1\131\14\0\1\132\5\0"+
    "\1\132\27\0\1\133\20\0\1\134\6\0\1\133\20\0"+
    "\1\134\5\0\1\134\27\0\1\135\24\0\1\114\2\0"+
    "\1\135\64\0\1\136\16\0\1\114\10\0\1\136\51\0"+
    "\1\137\27\0\1\137\60\0\1\140\21\0\1\114\5\0"+
    "\1\140\61\0\1\141\16\0\1\114\10\0\1\141\56\0"+
    "\1\142\16\0\1\114\10\0\1\142\75\0\1\47\1\143"+
    "\60\0\15\144\1\0\3\144\1\0\3\144\1\145\1\0"+
    "\32\144\26\0\1\144\1\146\13\144\1\112\1\144\1\147"+
    "\1\144\1\0\3\144\1\145\1\0\2\144\1\146\13\144"+
    "\1\150\1\144\1\147\6\144\1\150\2\144\26\0\12\144"+
    "\1\151\2\144\1\0\3\144\1\0\3\144\1\145\1\0"+
    "\13\144\1\151\16\144\26\0\3\144\1\152\11\144\1\0"+
    "\3\144\1\0\3\144\1\145\1\0\4\144\1\152\25\144"+
    "\26\0\1\153\14\144\1\0\3\144\1\0\3\144\1\145"+
    "\1\0\1\144\1\153\30\144\26\0\3\144\1\154\11\144"+
    "\1\0\3\144\1\0\3\144\1\145\1\0\4\144\1\154"+
    "\25\144\26\0\4\144\1\155\1\144\1\156\6\144\1\0"+
    "\3\144\1\0\3\144\1\145\1\0\5\144\1\155\1\144"+
    "\1\156\22\144\26\0\7\144\1\157\2\144\1\160\2\144"+
    "\1\0\3\144\1\0\3\144\1\145\1\0\10\144\1\157"+
    "\2\144\1\160\16\144\26\0\7\144\1\161\2\144\1\162"+
    "\2\144\1\0\3\144\1\127\3\144\1\145\1\0\10\144"+
    "\1\161\2\144\1\162\6\144\1\163\5\144\1\163\1\144"+
    "\26\0\4\144\1\164\10\144\1\0\3\144\1\0\3\144"+
    "\1\145\1\0\5\144\1\164\24\144\26\0\4\144\1\165"+
    "\10\144\1\0\3\144\1\132\3\144\1\145\1\0\5\144"+
    "\1\165\14\144\1\166\5\144\1\166\1\144\26\0\1\167"+
    "\14\144\1\0\3\144\1\134\3\144\1\145\1\0\1\144"+
    "\1\167\20\144\1\170\5\144\1\170\1\144\26\0\1\171"+
    "\14\144\1\0\3\144\1\0\3\144\1\145\1\0\1\144"+
    "\1\171\30\144\26\0\6\144\1\172\6\144\1\0\3\144"+
    "\1\0\3\144\1\145\1\0\7\144\1\172\22\144\26\0"+
    "\1\144\1\173\13\144\1\0\3\144\1\0\3\144\1\145"+
    "\1\0\2\144\1\173\27\144\26\0\3\144\1\174\11\144"+
    "\1\0\3\144\1\0\3\144\1\145\1\0\4\144\1\174"+
    "\25\144\26\0\6\144\1\175\6\144\1\0\3\144\1\0"+
    "\3\144\1\145\1\0\7\144\1\175\22\144\26\0\6\144"+
    "\1\176\6\144\1\0\3\144\1\0\3\144\1\145\1\0"+
    "\7\144\1\176\22\144\26\0\1\133\20\0\1\134\3\0"+
    "\1\114\2\0\1\133\20\0\1\134\5\0\1\134\30\0"+
    "\1\137\23\0\1\114\3\0\1\137\57\0\1\177\27\0"+
    "\1\177\56\0\1\200\3\0\1\201\23\0\1\200\3\0"+
    "\1\201\70\0\1\202\27\0\1\202\36\0\1\203\27\0"+
    "\1\203\64\0\1\204\27\0\1\204\70\0\1\205\27\0"+
    "\1\205\54\0\1\206\27\0\1\206\41\0\1\207\27\0"+
    "\1\207\60\0\1\210\11\0\1\211\15\0\1\210\11\0"+
    "\1\211\10\0\1\211\40\0\1\212\27\0\1\212\50\0"+
    "\1\213\27\0\1\213\60\0\1\214\27\0\1\214\53\0"+
    "\1\215\27\0\1\215\56\0\1\216\27\0\1\216\61\0"+
    "\1\217\27\0\1\217\67\0\1\220\27\0\1\220\10\0"+
    "\1\220\30\0\1\221\27\0\1\221\65\0\1\222\27\0"+
    "\1\222\50\0\1\223\27\0\1\223\57\0\1\224\5\0"+
    "\1\225\21\0\1\224\5\0\1\225\51\0\1\226\27\0"+
    "\1\226\74\0\1\227\27\0\1\227\5\0\1\227\35\0"+
    "\1\230\27\0\1\230\57\0\1\231\27\0\1\231\54\0"+
    "\1\232\7\0\1\233\17\0\1\232\7\0\1\233\10\0"+
    "\1\233\55\0\1\234\61\0\15\144\1\0\3\144\1\0"+
    "\4\144\1\0\32\144\26\0\2\144\1\235\12\144\1\0"+
    "\3\144\1\0\4\144\1\0\3\144\1\235\26\144\26\0"+
    "\15\144\1\0\2\144\1\236\1\0\4\144\1\0\21\144"+
    "\1\236\10\144\26\0\2\144\1\237\3\144\1\240\6\144"+
    "\1\0\3\144\1\0\4\144\1\0\3\144\1\237\3\144"+
    "\1\240\22\144\26\0\1\241\14\144\1\0\3\144\1\0"+
    "\4\144\1\0\1\144\1\241\30\144\26\0\6\144\1\242"+
    "\6\144\1\0\3\144\1\0\4\144\1\0\7\144\1\242"+
    "\22\144\26\0\15\144\1\0\2\144\1\243\1\0\4\144"+
    "\1\0\21\144\1\243\10\144\26\0\15\144\1\0\1\244"+
    "\2\144\1\0\4\144\1\0\17\144\1\244\12\144\26\0"+
    "\1\144\1\245\13\144\1\0\3\144\1\0\4\144\1\0"+
    "\2\144\1\245\27\144\26\0\3\144\1\246\11\144\1\211"+
    "\3\144\1\0\4\144\1\0\4\144\1\246\11\144\1\247"+
    "\10\144\1\247\2\144\26\0\10\144\1\250\4\144\1\0"+
    "\3\144\1\0\4\144\1\0\11\144\1\250\20\144\26\0"+
    "\2\144\1\251\12\144\1\0\3\144\1\0\4\144\1\0"+
    "\3\144\1\251\26\144\26\0\4\144\1\252\10\144\1\0"+
    "\3\144\1\0\4\144\1\0\5\144\1\252\24\144\26\0"+
    "\1\144\1\253\13\144\1\0\3\144\1\0\4\144\1\0"+
    "\2\144\1\253\27\144\26\0\1\144\1\254\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\254\27\144\26\0"+
    "\4\144\1\255\10\144\1\0\3\144\1\0\4\144\1\0"+
    "\5\144\1\255\24\144\26\0\15\144\1\220\3\144\1\0"+
    "\4\144\1\0\16\144\1\256\10\144\1\256\2\144\26\0"+
    "\1\257\14\144\1\0\3\144\1\0\4\144\1\0\1\144"+
    "\1\257\30\144\26\0\7\144\1\260\5\144\1\0\3\144"+
    "\1\0\4\144\1\0\10\144\1\260\21\144\26\0\1\144"+
    "\1\261\13\144\1\0\3\144\1\0\4\144\1\0\2\144"+
    "\1\261\27\144\26\0\2\144\1\262\5\144\1\263\4\144"+
    "\1\0\3\144\1\0\4\144\1\0\3\144\1\262\5\144"+
    "\1\263\20\144\26\0\3\144\1\264\11\144\1\0\3\144"+
    "\1\0\4\144\1\0\4\144\1\264\25\144\26\0\15\144"+
    "\1\0\3\144\1\227\4\144\1\0\22\144\1\265\5\144"+
    "\1\265\1\144\26\0\6\144\1\266\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\266\22\144\26\0\7\144"+
    "\1\267\5\144\1\0\3\144\1\0\4\144\1\0\10\144"+
    "\1\267\21\144\26\0\5\144\1\270\7\144\1\233\3\144"+
    "\1\0\4\144\1\0\6\144\1\270\7\144\1\271\10\144"+
    "\1\271\2\144\26\0\1\272\27\0\1\272\64\0\1\273"+
    "\27\0\1\273\60\0\1\274\27\0\1\274\51\0\1\275"+
    "\27\0\1\275\76\0\1\276\27\0\1\276\34\0\1\277"+
    "\27\0\1\277\55\0\1\300\27\0\1\300\56\0\1\301"+
    "\27\0\1\301\60\0\1\302\11\0\1\303\15\0\1\302"+
    "\11\0\1\303\50\0\1\304\27\0\1\304\54\0\1\305"+
    "\27\0\1\305\60\0\1\306\27\0\1\306\54\0\1\307"+
    "\27\0\1\307\54\0\1\310\27\0\1\310\61\0\1\311"+
    "\27\0\1\311\60\0\1\312\27\0\1\312\51\0\1\313"+
    "\27\0\1\313\55\0\1\314\27\0\1\314\55\0\1\315"+
    "\27\0\1\315\62\0\1\316\27\0\1\316\52\0\1\317"+
    "\27\0\1\317\56\0\1\320\27\0\1\320\64\0\1\321"+
    "\27\0\1\321\55\0\1\322\27\0\1\322\61\0\1\323"+
    "\27\0\1\323\67\0\1\324\27\0\1\324\5\0\1\324"+
    "\27\0\1\325\20\0\1\326\6\0\1\325\20\0\1\326"+
    "\5\0\1\326\31\0\1\327\27\0\1\327\54\0\1\330"+
    "\14\144\1\0\3\144\1\0\4\144\1\0\1\144\1\330"+
    "\30\144\26\0\3\144\1\331\11\144\1\0\3\144\1\0"+
    "\4\144\1\0\4\144\1\331\25\144\26\0\6\144\1\332"+
    "\6\144\1\0\3\144\1\0\4\144\1\0\7\144\1\332"+
    "\22\144\26\0\10\144\1\333\4\144\1\0\3\144\1\0"+
    "\4\144\1\0\11\144\1\333\20\144\26\0\15\144\1\0"+
    "\3\144\1\0\1\144\1\334\2\144\1\0\24\144\1\334"+
    "\5\144\26\0\1\144\1\335\13\144\1\0\3\144\1\0"+
    "\4\144\1\0\2\144\1\335\27\144\26\0\1\336\14\144"+
    "\1\0\3\144\1\0\4\144\1\0\1\144\1\336\30\144"+
    "\26\0\1\337\14\144\1\0\3\144\1\0\4\144\1\0"+
    "\1\144\1\337\30\144\26\0\2\144\1\340\11\144\1\341"+
    "\1\0\3\144\1\0\4\144\1\0\3\144\1\340\11\144"+
    "\1\341\14\144\26\0\6\144\1\342\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\342\22\144\26\0\4\144"+
    "\1\343\10\144\1\0\3\144\1\0\4\144\1\0\5\144"+
    "\1\343\24\144\26\0\6\144\1\344\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\344\22\144\26\0\4\144"+
    "\1\345\10\144\1\0\3\144\1\0\4\144\1\0\5\144"+
    "\1\345\24\144\26\0\2\144\1\346\12\144\1\0\3\144"+
    "\1\0\4\144\1\0\3\144\1\346\26\144\26\0\5\144"+
    "\1\347\7\144\1\0\3\144\1\0\4\144\1\0\6\144"+
    "\1\347\23\144\26\0\7\144\1\350\5\144\1\0\3\144"+
    "\1\0\4\144\1\0\10\144\1\350\21\144\26\0\2\144"+
    "\1\351\12\144\1\0\3\144\1\0\4\144\1\0\3\144"+
    "\1\351\26\144\26\0\1\144\1\352\13\144\1\0\3\144"+
    "\1\0\4\144\1\0\2\144\1\352\27\144\26\0\1\353"+
    "\14\144\1\0\3\144\1\0\4\144\1\0\1\144\1\353"+
    "\30\144\26\0\4\144\1\354\10\144\1\0\3\144\1\0"+
    "\4\144\1\0\5\144\1\354\24\144\26\0\1\355\14\144"+
    "\1\0\3\144\1\0\4\144\1\0\1\144\1\355\30\144"+
    "\26\0\1\356\14\144\1\0\3\144\1\0\4\144\1\0"+
    "\1\144\1\356\30\144\26\0\6\144\1\357\6\144\1\0"+
    "\3\144\1\0\4\144\1\0\7\144\1\357\22\144\26\0"+
    "\5\144\1\360\7\144\1\0\3\144\1\0\4\144\1\0"+
    "\6\144\1\360\23\144\26\0\10\144\1\361\4\144\1\0"+
    "\3\144\1\0\4\144\1\0\11\144\1\361\20\144\26\0"+
    "\15\144\1\0\3\144\1\324\4\144\1\0\22\144\1\362"+
    "\5\144\1\362\1\144\26\0\1\363\14\144\1\0\3\144"+
    "\1\326\4\144\1\0\1\144\1\363\20\144\1\364\5\144"+
    "\1\364\1\144\26\0\2\144\1\365\12\144\1\0\3\144"+
    "\1\0\4\144\1\0\3\144\1\365\26\144\31\0\1\366"+
    "\27\0\1\366\71\0\1\367\27\0\1\367\41\0\1\370"+
    "\14\0\1\371\12\0\1\370\14\0\1\371\40\0\1\372"+
    "\27\0\1\372\62\0\1\373\27\0\1\373\67\0\1\374"+
    "\27\0\1\374\10\0\1\374\32\0\1\375\27\0\1\375"+
    "\55\0\1\376\27\0\1\376\76\0\1\377\27\0\1\377"+
    "\5\0\1\377\41\0\1\u0100\27\0\1\u0100\51\0\1\u0101"+
    "\27\0\1\u0101\62\0\1\u0102\27\0\1\u0102\60\0\1\u0103"+
    "\27\0\1\u0103\51\0\1\u0104\27\0\1\u0104\71\0\1\u0105"+
    "\27\0\1\u0105\5\0\1\u0105\27\0\1\u0106\27\0\1\u0106"+
    "\61\0\1\u0107\27\0\1\u0107\55\0\1\u0108\27\0\1\u0108"+
    "\61\0\1\u0109\27\0\1\u0109\52\0\1\u010a\27\0\1\u010a"+
    "\62\0\1\u010b\27\0\1\u010b\72\0\1\u010c\27\0\1\u010c"+
    "\5\0\1\u010c\50\0\1\u010d\27\0\1\u010d\5\0\1\u010d"+
    "\45\0\1\u010e\27\0\1\u010e\43\0\1\u010f\27\0\1\u010f"+
    "\61\0\1\u0110\27\0\1\u0110\56\0\1\u0111\27\0\1\u0111"+
    "\50\0\3\144\1\u0112\11\144\1\0\3\144\1\0\4\144"+
    "\1\0\4\144\1\u0112\25\144\26\0\1\u0113\14\144\1\0"+
    "\3\144\1\0\4\144\1\0\1\144\1\u0113\30\144\26\0"+
    "\15\144\1\0\1\u0114\2\144\1\0\4\144\1\0\17\144"+
    "\1\u0114\12\144\26\0\1\144\1\u0115\13\144\1\0\1\u0116"+
    "\2\144\1\0\4\144\1\0\2\144\1\u0115\14\144\1\u0116"+
    "\12\144\26\0\4\144\1\u0117\10\144\1\0\3\144\1\0"+
    "\4\144\1\0\5\144\1\u0117\24\144\26\0\15\144\1\374"+
    "\3\144\1\0\4\144\1\0\16\144\1\u0118\10\144\1\u0118"+
    "\2\144\26\0\2\144\1\u0119\12\144\1\0\3\144\1\0"+
    "\4\144\1\0\3\144\1\u0119\26\144\26\0\1\144\1\u011a"+
    "\13\144\1\0\3\144\1\0\4\144\1\0\2\144\1\u011a"+
    "\27\144\26\0\15\144\1\0\3\144\1\377\4\144\1\0"+
    "\22\144\1\u011b\5\144\1\u011b\1\144\26\0\12\144\1\u011c"+
    "\2\144\1\0\3\144\1\0\4\144\1\0\13\144\1\u011c"+
    "\16\144\26\0\5\144\1\u011d\7\144\1\0\3\144\1\0"+
    "\4\144\1\0\6\144\1\u011d\23\144\26\0\11\144\1\u011e"+
    "\3\144\1\0\3\144\1\0\4\144\1\0\12\144\1\u011e"+
    "\17\144\26\0\13\144\1\u011f\1\144\1\0\3\144\1\0"+
    "\4\144\1\0\14\144\1\u011f\15\144\26\0\6\144\1\u0120"+
    "\6\144\1\0\3\144\1\0\4\144\1\0\7\144\1\u0120"+
    "\22\144\26\0\15\144\1\0\3\144\1\u0105\4\144\1\0"+
    "\22\144\1\u0121\5\144\1\u0121\1\144\26\0\1\u0122\14\144"+
    "\1\0\3\144\1\0\4\144\1\0\1\144\1\u0122\30\144"+
    "\26\0\3\144\1\u0123\11\144\1\0\3\144\1\0\4\144"+
    "\1\0\4\144\1\u0123\25\144\26\0\2\144\1\u0124\12\144"+
    "\1\0\3\144\1\0\4\144\1\0\3\144\1\u0124\26\144"+
    "\26\0\5\144\1\u0125\7\144\1\0\3\144\1\0\4\144"+
    "\1\0\6\144\1\u0125\23\144\26\0\1\144\1\u0126\13\144"+
    "\1\0\3\144\1\0\4\144\1\0\2\144\1\u0126\27\144"+
    "\26\0\5\144\1\u0127\7\144\1\0\3\144\1\0\4\144"+
    "\1\0\6\144\1\u0127\23\144\26\0\15\144\1\0\3\144"+
    "\1\u010c\4\144\1\0\22\144\1\u0128\5\144\1\u0128\1\144"+
    "\26\0\15\144\1\0\3\144\1\u010d\4\144\1\0\22\144"+
    "\1\u0129\5\144\1\u0129\1\144\26\0\15\144\1\0\1\u012a"+
    "\2\144\1\0\4\144\1\0\17\144\1\u012a\12\144\26\0"+
    "\3\144\1\u012b\11\144\1\0\3\144\1\0\4\144\1\0"+
    "\4\144\1\u012b\25\144\26\0\6\144\1\u012c\6\144\1\0"+
    "\3\144\1\0\4\144\1\0\7\144\1\u012c\22\144\26\0"+
    "\6\144\1\u012d\6\144\1\0\3\144\1\0\4\144\1\0"+
    "\7\144\1\u012d\22\144\32\0\1\u012e\27\0\1\u012e\56\0"+
    "\1\u012f\27\0\1\u012f\67\0\1\u0130\4\0\1\u0131\22\0"+
    "\1\u0130\4\0\1\u0131\3\0\1\u0130\51\0\1\u0132\27\0"+
    "\1\u0132\5\0\1\u0132\50\0\1\u0133\27\0\1\u0133\5\0"+
    "\1\u0133\47\0\1\u0134\27\0\1\u0134\37\0\1\u0135\27\0"+
    "\1\u0135\56\0\1\u0136\27\0\1\u0136\57\0\1\u0137\27\0"+
    "\1\u0137\54\0\1\u0138\27\0\1\u0138\64\0\1\u0139\27\0"+
    "\1\u0139\51\0\1\u013a\27\0\1\u013a\61\0\1\u013b\27\0"+
    "\1\u013b\60\0\1\u013c\27\0\1\u013c\56\0\1\u013d\27\0"+
    "\1\u013d\53\0\1\u013e\27\0\1\u013e\60\0\1\u013f\27\0"+
    "\1\u013f\51\0\1\u0140\27\0\1\u0140\60\0\1\u0141\27\0"+
    "\1\u0141\60\0\1\u0142\27\0\1\u0142\57\0\1\u0143\27\0"+
    "\1\u0143\57\0\1\u0144\27\0\1\u0144\50\0\4\144\1\u0145"+
    "\10\144\1\0\3\144\1\0\4\144\1\0\5\144\1\u0145"+
    "\24\144\26\0\15\144\1\u0130\3\144\1\0\1\u0146\3\144"+
    "\1\0\16\144\1\u0147\4\144\1\u0146\3\144\1\u0147\2\144"+
    "\26\0\4\144\1\u0148\10\144\1\0\3\144\1\0\4\144"+
    "\1\0\5\144\1\u0148\24\144\26\0\15\144\1\0\3\144"+
    "\1\u0132\4\144\1\0\22\144\1\u0149\5\144\1\u0149\1\144"+
    "\26\0\15\144\1\0\3\144\1\u0133\4\144\1\0\22\144"+
    "\1\u014a\5\144\1\u014a\1\144\26\0\15\144\1\0\2\144"+
    "\1\u014b\1\0\4\144\1\0\21\144\1\u014b\10\144\26\0"+
    "\1\144\1\u014c\13\144\1\0\3\144\1\0\4\144\1\0"+
    "\2\144\1\u014c\27\144\26\0\1\144\1\u014d\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\u014d\27\144\26\0"+
    "\2\144\1\u014e\12\144\1\0\3\144\1\0\4\144\1\0"+
    "\3\144\1\u014e\26\144\26\0\1\u014f\14\144\1\0\3\144"+
    "\1\0\4\144\1\0\1\144\1\u014f\30\144\26\0\6\144"+
    "\1\u0150\6\144\1\0\3\144\1\0\4\144\1\0\7\144"+
    "\1\u0150\22\144\26\0\1\144\1\u0151\13\144\1\0\3\144"+
    "\1\0\4\144\1\0\2\144\1\u0151\27\144\26\0\4\144"+
    "\1\u0152\10\144\1\0\3\144\1\0\4\144\1\0\5\144"+
    "\1\u0152\24\144\26\0\6\144\1\u0153\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\u0153\22\144\26\0\6\144"+
    "\1\u0154\6\144\1\0\3\144\1\0\4\144\1\0\7\144"+
    "\1\u0154\22\144\26\0\3\144\1\u0155\11\144\1\0\3\144"+
    "\1\0\4\144\1\0\4\144\1\u0155\25\144\26\0\5\144"+
    "\1\u0156\7\144\1\0\3\144\1\0\4\144\1\0\6\144"+
    "\1\u0156\23\144\26\0\1\u0157\14\144\1\0\3\144\1\0"+
    "\4\144\1\0\1\144\1\u0157\30\144\26\0\2\144\1\u0158"+
    "\12\144\1\0\3\144\1\0\4\144\1\0\3\144\1\u0158"+
    "\26\144\26\0\4\144\1\u0159\10\144\1\0\3\144\1\0"+
    "\4\144\1\0\5\144\1\u0159\24\144\26\0\5\144\1\u015a"+
    "\7\144\1\0\3\144\1\0\4\144\1\0\6\144\1\u015a"+
    "\23\144\26\0\6\144\1\u015b\6\144\1\0\3\144\1\0"+
    "\4\144\1\0\7\144\1\u015b\22\144\43\0\1\u015c\3\0"+
    "\1\u015d\23\0\1\u015c\3\0\1\u015d\4\0\1\u015c\1\u015d"+
    "\50\0\1\u015e\27\0\1\u015e\5\0\1\u015e\34\0\1\u015f"+
    "\27\0\1\u015f\54\0\1\u0160\27\0\1\u0160\56\0\1\u0161"+
    "\27\0\1\u0161\65\0\1\u0162\27\0\1\u0162\46\0\1\u0163"+
    "\27\0\1\u0163\54\0\1\u0164\27\0\1\u0164\60\0\1\u0165"+
    "\27\0\1\u0165\56\0\1\u0166\27\0\1\u0166\56\0\1\u0167"+
    "\27\0\1\u0167\55\0\1\u0168\27\0\1\u0168\56\0\1\u0169"+
    "\27\0\1\u0169\60\0\1\u016a\27\0\1\u016a\61\0\1\u016b"+
    "\27\0\1\u016b\71\0\1\u016c\27\0\1\u016c\5\0\1\u016c"+
    "\32\0\1\u016d\27\0\1\u016d\57\0\1\u016e\27\0\1\u016e"+
    "\56\0\1\u016f\27\0\1\u016f\55\0\1\u0170\27\0\1\u0170"+
    "\53\0\15\144\1\0\3\144\1\u015e\4\144\1\0\22\144"+
    "\1\u0171\5\144\1\u0171\1\144\26\0\15\144\1\u015c\3\144"+
    "\1\u015d\4\144\1\0\16\144\1\u0172\3\144\1\u0173\4\144"+
    "\1\u0172\1\u0173\1\144\26\0\5\144\1\u0174\7\144\1\0"+
    "\3\144\1\0\4\144\1\0\6\144\1\u0174\23\144\26\0"+
    "\3\144\1\u0175\11\144\1\0\3\144\1\0\4\144\1\0"+
    "\4\144\1\u0175\25\144\26\0\3\144\1\u0176\11\144\1\0"+
    "\3\144\1\0\4\144\1\0\4\144\1\u0176\25\144\26\0"+
    "\12\144\1\u0177\2\144\1\0\3\144\1\0\4\144\1\0"+
    "\13\144\1\u0177\16\144\26\0\2\144\1\u0178\12\144\1\0"+
    "\3\144\1\0\4\144\1\0\3\144\1\u0178\26\144\26\0"+
    "\1\u0179\14\144\1\0\3\144\1\0\4\144\1\0\1\144"+
    "\1\u0179\30\144\26\0\2\144\1\u017a\12\144\1\0\3\144"+
    "\1\0\4\144\1\0\3\144\1\u017a\26\144\26\0\2\144"+
    "\1\u017b\12\144\1\0\3\144\1\0\4\144\1\0\3\144"+
    "\1\u017b\26\144\26\0\2\144\1\u017c\12\144\1\0\3\144"+
    "\1\0\4\144\1\0\3\144\1\u017c\26\144\26\0\1\144"+
    "\1\u017d\13\144\1\0\3\144\1\0\4\144\1\0\2\144"+
    "\1\u017d\27\144\26\0\1\144\1\u017e\13\144\1\0\3\144"+
    "\1\0\4\144\1\0\2\144\1\u017e\27\144\26\0\3\144"+
    "\1\u017f\11\144\1\0\3\144\1\0\4\144\1\0\4\144"+
    "\1\u017f\25\144\26\0\6\144\1\u0180\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\u0180\22\144\26\0\15\144"+
    "\1\0\3\144\1\u016c\4\144\1\0\22\144\1\u0181\5\144"+
    "\1\u0181\1\144\26\0\3\144\1\u0182\11\144\1\0\3\144"+
    "\1\0\4\144\1\0\4\144\1\u0182\25\144\26\0\4\144"+
    "\1\u0183\10\144\1\0\3\144\1\0\4\144\1\0\5\144"+
    "\1\u0183\24\144\26\0\4\144\1\u0184\10\144\1\0\3\144"+
    "\1\0\4\144\1\0\5\144\1\u0184\24\144\26\0\3\144"+
    "\1\u0185\11\144\1\0\3\144\1\0\4\144\1\0\4\144"+
    "\1\u0185\25\144\36\0\1\u0186\27\0\1\u0186\47\0\1\u0187"+
    "\27\0\1\u0187\61\0\1\u0188\27\0\1\u0188\73\0\1\u0189"+
    "\27\0\1\u0189\5\0\1\u0189\50\0\1\u018a\27\0\1\u018a"+
    "\5\0\1\u018a\35\0\1\u018b\27\0\1\u018b\54\0\1\u018c"+
    "\27\0\1\u018c\55\0\1\u018d\27\0\1\u018d\57\0\1\u018e"+
    "\27\0\1\u018e\60\0\1\u018f\27\0\1\u018f\50\0\1\u0190"+
    "\27\0\1\u0190\62\0\1\u0191\27\0\1\u0191\54\0\1\u0192"+
    "\27\0\1\u0192\71\0\1\u0193\27\0\1\u0193\10\0\1\u0193"+
    "\34\0\1\u0194\27\0\1\u0194\52\0\4\144\1\u0195\10\144"+
    "\1\0\3\144\1\0\4\144\1\0\5\144\1\u0195\24\144"+
    "\26\0\10\144\1\u0196\4\144\1\0\3\144\1\0\4\144"+
    "\1\0\11\144\1\u0196\20\144\26\0\1\144\1\u0197\13\144"+
    "\1\0\3\144\1\0\4\144\1\0\2\144\1\u0197\27\144"+
    "\26\0\15\144\1\0\3\144\1\u0189\4\144\1\0\22\144"+
    "\1\u0198\5\144\1\u0198\1\144\26\0\15\144\1\0\3\144"+
    "\1\u018a\4\144\1\0\22\144\1\u0199\5\144\1\u0199\1\144"+
    "\26\0\6\144\1\u019a\6\144\1\0\3\144\1\0\4\144"+
    "\1\0\7\144\1\u019a\22\144\26\0\4\144\1\u019b\10\144"+
    "\1\0\3\144\1\0\4\144\1\0\5\144\1\u019b\24\144"+
    "\26\0\3\144\1\u019c\11\144\1\0\3\144\1\0\4\144"+
    "\1\0\4\144\1\u019c\25\144\26\0\4\144\1\u019d\10\144"+
    "\1\0\3\144\1\0\4\144\1\0\5\144\1\u019d\24\144"+
    "\26\0\6\144\1\u019e\6\144\1\0\3\144\1\0\4\144"+
    "\1\0\7\144\1\u019e\22\144\26\0\1\u019f\14\144\1\0"+
    "\3\144\1\0\4\144\1\0\1\144\1\u019f\30\144\26\0"+
    "\4\144\1\u01a0\10\144\1\0\3\144\1\0\4\144\1\0"+
    "\5\144\1\u01a0\24\144\26\0\2\144\1\u01a1\12\144\1\0"+
    "\3\144\1\0\4\144\1\0\3\144\1\u01a1\26\144\26\0"+
    "\15\144\1\u0193\3\144\1\0\4\144\1\0\16\144\1\u01a2"+
    "\10\144\1\u01a2\2\144\26\0\4\144\1\u01a3\10\144\1\0"+
    "\3\144\1\0\4\144\1\0\5\144\1\u01a3\24\144\47\0"+
    "\1\u01a4\27\0\1\u01a4\5\0\1\u01a4\50\0\1\u01a5\27\0"+
    "\1\u01a5\5\0\1\u01a5\30\0\1\u01a6\27\0\1\u01a6\61\0"+
    "\1\u01a7\27\0\1\u01a7\53\0\1\u01a8\27\0\1\u01a8\60\0"+
    "\1\u01a9\27\0\1\u01a9\61\0\1\u01aa\27\0\1\u01aa\51\0"+
    "\1\u01ab\27\0\1\u01ab\55\0\1\144\1\u01ac\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\u01ac\27\144\26\0"+
    "\15\144\1\0\3\144\1\u01a4\4\144\1\0\22\144\1\u01ad"+
    "\5\144\1\u01ad\1\144\26\0\15\144\1\0\3\144\1\u01a5"+
    "\4\144\1\0\22\144\1\u01ae\5\144\1\u01ae\1\144\26\0"+
    "\4\144\1\u01af\10\144\1\0\3\144\1\0\4\144\1\0"+
    "\5\144\1\u01af\24\144\26\0\1\144\1\u01b0\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\u01b0\27\144\26\0"+
    "\3\144\1\u01b1\11\144\1\0\3\144\1\0\4\144\1\0"+
    "\4\144\1\u01b1\25\144\26\0\6\144\1\u01b2\6\144\1\0"+
    "\3\144\1\0\4\144\1\0\7\144\1\u01b2\22\144\26\0"+
    "\1\144\1\u01b3\13\144\1\0\3\144\1\0\4\144\1\0"+
    "\2\144\1\u01b3\27\144\27\0\1\u01b4\27\0\1\u01b4\62\0"+
    "\1\u01b5\27\0\1\u01b5\52\0\1\u01b6\27\0\1\u01b6\62\0"+
    "\1\u01b7\27\0\1\u01b7\62\0\1\u01b8\27\0\1\u01b8\53\0"+
    "\1\u01b9\27\0\1\u01b9\50\0\1\144\1\u01ba\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\u01ba\27\144\26\0"+
    "\5\144\1\u01bb\7\144\1\0\3\144\1\0\4\144\1\0"+
    "\6\144\1\u01bb\23\144\26\0\1\144\1\u01bc\13\144\1\0"+
    "\3\144\1\0\4\144\1\0\2\144\1\u01bc\27\144\26\0"+
    "\5\144\1\u01bd\7\144\1\0\3\144\1\0\4\144\1\0"+
    "\6\144\1\u01bd\23\144\26\0\11\144\1\u01be\3\144\1\0"+
    "\3\144\1\0\4\144\1\0\12\144\1\u01be\17\144\26\0"+
    "\6\144\1\u01bf\6\144\1\0\3\144\1\0\4\144\1\0"+
    "\7\144\1\u01bf\22\144\34\0\1\u01c0\27\0\1\u01c0\71\0"+
    "\1\u01c1\27\0\1\u01c1\5\0\1\u01c1\50\0\1\u01c2\27\0"+
    "\1\u01c2\5\0\1\u01c2\36\0\1\u01c3\27\0\1\u01c3\52\0"+
    "\1\u01c4\27\0\1\u01c4\53\0\6\144\1\u01c5\6\144\1\0"+
    "\3\144\1\0\4\144\1\0\7\144\1\u01c5\22\144\26\0"+
    "\15\144\1\0\3\144\1\u01c1\4\144\1\0\22\144\1\u01c6"+
    "\5\144\1\u01c6\1\144\26\0\15\144\1\0\3\144\1\u01c2"+
    "\4\144\1\0\22\144\1\u01c7\5\144\1\u01c7\1\144\26\0"+
    "\7\144\1\u01c8\5\144\1\0\3\144\1\0\4\144\1\0"+
    "\10\144\1\u01c8\21\144\26\0\3\144\1\u01c9\11\144\1\0"+
    "\3\144\1\0\4\144\1\0\4\144\1\u01c9\25\144\35\0"+
    "\1\u01ca\27\0\1\u01ca\55\0\1\u01cb\27\0\1\u01cb\70\0"+
    "\1\u01cc\27\0\1\u01cc\44\0\1\u01cd\27\0\1\u01cd\50\0"+
    "\7\144\1\u01ce\5\144\1\0\3\144\1\0\4\144\1\0"+
    "\10\144\1\u01ce\21\144\26\0\6\144\1\u01cf\6\144\1\0"+
    "\3\144\1\0\4\144\1\0\7\144\1\u01cf\22\144\26\0"+
    "\15\144\1\0\2\144\1\u01d0\1\0\4\144\1\0\21\144"+
    "\1\u01d0\10\144\26\0\6\144\1\u01d1\6\144\1\0\3\144"+
    "\1\0\4\144\1\0\7\144\1\u01d1\22\144\26\0\1\u01d2"+
    "\27\0\1\u01d2\65\0\1\u01d3\27\0\1\u01d3\55\0\1\u01d4"+
    "\27\0\1\u01d4\50\0\1\u01d5\14\144\1\0\3\144\1\0"+
    "\4\144\1\0\1\144\1\u01d5\30\144\26\0\7\144\1\u01d6"+
    "\5\144\1\0\3\144\1\0\4\144\1\0\10\144\1\u01d6"+
    "\21\144\26\0\6\144\1\u01d7\6\144\1\0\3\144\1\0"+
    "\4\144\1\0\7\144\1\u01d7\22\144\43\0\1\u01d8\27\0"+
    "\1\u01d8\10\0\1\u01d8\37\0\1\u01d9\27\0\1\u01d9\47\0"+
    "\15\144\1\u01d8\3\144\1\0\4\144\1\0\16\144\1\u01da"+
    "\10\144\1\u01da\2\144\26\0\7\144\1\u01db\5\144\1\0"+
    "\3\144\1\0\4\144\1\0\10\144\1\u01db\21\144\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27051];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\4\1\3\11\27\1\1\11\24\1\14\11"+
    "\3\0\1\1\17\0\1\1\7\0\33\1\10\0\1\1"+
    "\6\0\1\11\15\0\36\1\13\0\1\11\10\0\1\11"+
    "\2\0\1\11\6\0\36\1\2\0\2\11\1\0\1\11"+
    "\2\0\1\1\20\0\3\11\34\1\1\11\2\0\1\11"+
    "\20\0\1\11\2\0\30\1\3\0\1\11\7\0\1\11"+
    "\1\0\1\1\2\0\4\11\25\1\6\0\6\11\1\0"+
    "\1\11\1\0\17\1\2\0\1\11\2\0\1\11\2\0"+
    "\10\1\2\0\1\11\3\0\6\1\4\0\1\11\5\1"+
    "\3\0\1\11\4\1\1\0\1\11\1\0\3\1\2\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
public Pintar pin = new Pintar();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        Interfaz_c3d.notificar_er(errLex);
            }
          case 76: break;
          case 2: 
            { return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
            }
          case 77: break;
          case 3: 
            { return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
            }
          case 78: break;
          case 4: 
            { return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
            }
          case 79: break;
          case 5: 
            { return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
            }
          case 80: break;
          case 6: 
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            }
          case 81: break;
          case 7: 
            { return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
            }
          case 82: break;
          case 8: 
            { return new Symbol(sym.DPUNTO, yyline, yycolumn,yytext());
            }
          case 83: break;
          case 9: 
            { return new Symbol(sym.ASIG, yyline, yycolumn,yytext());
            }
          case 84: break;
          case 10: 
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          case 85: break;
          case 11: 
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          case 86: break;
          case 12: 
            { return new Symbol(sym.OREXP, yyline, yycolumn,yytext());
            }
          case 87: break;
          case 13: 
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            }
          case 88: break;
          case 14: 
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          case 89: break;
          case 15: 
            { return new Symbol(sym.POT, yyline, yycolumn,yytext());
            }
          case 90: break;
          case 16: 
            { return new Symbol(sym.BELOW, yyline, yycolumn,yytext());
            }
          case 91: break;
          case 17: 
            { return new Symbol(sym.ABOVE, yyline, yycolumn,yytext());
            }
          case 92: break;
          case 18: 
            { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            }
          case 93: break;
          case 19: 
            { return new Symbol(sym.ELEMENTO, yyline, yycolumn,yytext());
            }
          case 94: break;
          case 20: 
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          case 95: break;
          case 21: 
            { /*Comentarios*/
            }
          case 96: break;
          case 22: 
            { /*Espacios en blanco, ignorados*/
            }
          case 97: break;
          case 23: 
            { /*Saltos de linea, ignorados*/
            }
          case 98: break;
          case 24: 
            { return new Symbol(sym.EQUAL, yyline, yycolumn,yytext());
            }
          case 99: break;
          case 25: 
            { return new Symbol(sym.INC, yyline, yycolumn,yytext());
            }
          case 100: break;
          case 26: 
            { return new Symbol(sym.DEC, yyline, yycolumn,yytext());
            }
          case 101: break;
          case 27: 
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          case 102: break;
          case 28: 
            { return new Symbol(sym.BELOWE, yyline, yycolumn,yytext());
            }
          case 103: break;
          case 29: 
            { return new Symbol(sym.ABOVEE, yyline, yycolumn,yytext());
            }
          case 104: break;
          case 30: 
            { return new Symbol(sym.NEQUAL, yyline, yycolumn,yytext());
            }
          case 105: break;
          case 31: 
            { return new Symbol(sym.XOR, yyline, yycolumn,yytext());
            }
          case 106: break;
          case 32: 
            { return new Symbol(sym.NAND, yyline, yycolumn,yytext());
            }
          case 107: break;
          case 33: 
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          case 108: break;
          case 34: 
            { return new Symbol(sym.ELEMENTOESTADO, yyline, yycolumn,yytext());
            }
          case 109: break;
          case 35: 
            { return new Symbol(sym.SI, yyline, yycolumn,yytext());
            }
          case 110: break;
          case 36: 
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          case 111: break;
          case 37: 
            { return new Symbol(sym.CON, yyline, yycolumn,yytext());
            }
          case 112: break;
          case 38: 
            { return new Symbol(sym.FIN, yyline, yycolumn,yytext());
            }
          case 113: break;
          case 39: 
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          case 114: break;
          case 40: 
            { return new Symbol(sym.CASO, yyline, yycolumn,yytext());
            }
          case 115: break;
          case 41: 
            { return new Symbol(sym.SINO, yyline, yycolumn,yytext());
            }
          case 116: break;
          case 42: 
            { return new Symbol(sym.PARA, yyline, yycolumn,yytext());
            }
          case 117: break;
          case 43: 
            { return new Symbol(sym.AFN, yyline, yycolumn,yytext());
            }
          case 118: break;
          case 44: 
            { return new Symbol(sym.AFD, yyline, yycolumn,yytext());
            }
          case 119: break;
          case 45: 
            { return new Symbol(sym.NUEVO, yyline, yycolumn,yytext());
            }
          case 120: break;
          case 46: 
            { return new Symbol(sym.ORDEN, yyline, yycolumn,yytext());
            }
          case 121: break;
          case 47: 
            { return new Symbol(sym.HACER, yyline, yycolumn,yytext());
            }
          case 122: break;
          case 48: 
            { return new Symbol(sym.HACIA, yyline, yycolumn,yytext());
            }
          case 123: break;
          case 49: 
            { return new Symbol(sym.HASTA, yyline, yycolumn,yytext());
            }
          case 124: break;
          case 50: 
            { return new Symbol(sym.INT1, yyline, yycolumn,yytext());
            }
          case 125: break;
          case 51: 
            { return new Symbol(sym.ER, yyline, yycolumn,yytext());
            }
          case 126: break;
          case 52: 
            { pin.pintaAzul(yychar,yylength()); return new Symbol(sym.INI, yyline, yycolumn,yytext());
            }
          case 127: break;
          case 53: 
            { return new Symbol(sym.ESTADO, yyline, yycolumn,yytext());
            }
          case 128: break;
          case 54: 
            { return new Symbol(sym.REPETIR, yyline, yycolumn,yytext());
            }
          case 129: break;
          case 55: 
            { return new Symbol(sym.FUNCION, yyline, yycolumn,yytext());
            }
          case 130: break;
          case 56: 
            { return new Symbol(sym.MOSTRAR, yyline, yycolumn,yytext());
            }
          case 131: break;
          case 57: 
            { return new Symbol(sym.DETENER, yyline, yycolumn,yytext());
            }
          case 132: break;
          case 58: 
            { return new Symbol(sym.DEFECTO, yyline, yycolumn,yytext());
            }
          case 133: break;
          case 59: 
            { return new Symbol(sym.GRAFICO, yyline, yycolumn,yytext());
            }
          case 134: break;
          case 60: 
            { return new Symbol(sym.VALIDAR, yyline, yycolumn,yytext());
            }
          case 135: break;
          case 61: 
            { return new Symbol(sym.CONJUNTO, yyline, yycolumn,yytext());
            }
          case 136: break;
          case 62: 
            { return new Symbol(sym.CHAR1, yyline, yycolumn,yytext());
            }
          case 137: break;
          case 63: 
            { return new Symbol(sym.ALFABETO, yyline, yycolumn,yytext());
            }
          case 138: break;
          case 64: 
            { return new Symbol(sym.AUTOMATA, yyline, yycolumn,yytext());
            }
          case 139: break;
          case 65: 
            { return new Symbol(sym.FLOTANTE, yyline, yycolumn,yytext());
            }
          case 140: break;
          case 66: 
            { return new Symbol(sym.BOOLEANO, yyline, yycolumn,yytext());
            }
          case 141: break;
          case 67: 
            { return new Symbol(sym.MIENTRAS, yyline, yycolumn,yytext());
            }
          case 142: break;
          case 68: 
            { return new Symbol(sym.EXPRESION, yyline, yycolumn,yytext());
            }
          case 143: break;
          case 69: 
            { return new Symbol(sym.CONTINUA, yyline, yycolumn,yytext());
            }
          case 144: break;
          case 70: 
            { return new Symbol(sym.TRANSICION, yyline, yycolumn,yytext());
            }
          case 145: break;
          case 71: 
            { return new Symbol(sym.SELEC, yyline, yycolumn,yytext());
            }
          case 146: break;
          case 72: 
            { return new Symbol(sym.MTABLA, yyline, yycolumn,yytext());
            }
          case 147: break;
          case 73: 
            { return new Symbol(sym.EINICIAL, yyline, yycolumn,yytext());
            }
          case 148: break;
          case 74: 
            { return new Symbol(sym.EFINAL, yyline, yycolumn,yytext());
            }
          case 149: break;
          case 75: 
            { return new Symbol(sym.OPRINPAL, yyline, yycolumn,yytext());
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
