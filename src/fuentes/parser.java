
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 04 18:04:27 MST 2019
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;
import Interfaz.Imagen;
import Interfaz.ImagenAC;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 04 18:04:27 MST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\006\006\000\002\006" +
    "\007\000\002\007\004\000\002\007\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\051\002\000\002\042" +
    "\013\000\002\043\004\000\002\043\003\000\002\052\002" +
    "\000\002\044\007\000\002\005\003\000\002\005\003\000" +
    "\002\053\002\000\002\045\006\000\002\045\002\000\002" +
    "\054\002\000\002\055\002\000\002\031\015\000\002\056" +
    "\002\000\002\057\002\000\002\046\015\000\002\060\002" +
    "\000\002\061\002\000\002\040\014\000\002\062\002\000" +
    "\002\041\007\000\002\041\002\000\002\063\002\000\002" +
    "\064\002\000\002\065\002\000\002\037\023\000\002\004" +
    "\003\000\002\004\003\000\002\066\002\000\002\067\002" +
    "\000\002\030\013\000\002\070\002\000\002\047\006\000" +
    "\002\071\002\000\002\047\006\000\002\072\002\000\002" +
    "\047\006\000\002\073\002\000\002\047\006\000\002\047" +
    "\004\000\002\047\003\000\002\050\005\000\002\050\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\005\000" +
    "\002\027\006\000\002\026\005\000\002\026\007\000\002" +
    "\026\007\000\002\023\003\000\002\023\003\000\002\033" +
    "\011\000\002\010\005\000\002\010\003\000\002\032\010" +
    "\000\002\032\007\000\002\034\006\000\002\035\010\000" +
    "\002\036\010\000\002\012\005\000\002\012\003\000\002" +
    "\011\005\000\002\011\003\000\002\013\007\000\002\013" +
    "\011\000\002\013\011\000\002\013\013\000\002\016\012" +
    "\000\002\016\012\000\002\020\013\000\002\021\002\000" +
    "\002\014\007\000\002\015\007\000\002\017\006\000\002" +
    "\022\010\000\002\022\006\000\002\006\006\000\002\033" +
    "\010\000\002\033\010\000\002\033\010\000\002\033\010" +
    "\000\002\032\011\000\002\032\007\000\002\032\007\000" +
    "\002\016\011\000\002\036\011\000\002\036\007\000\002" +
    "\036\007\000\002\035\011\000\002\035\007\000\002\035" +
    "\007\000\002\034\005\000\002\026\004\000\002\026\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\074\003\045\005\040\006\011\007\044\011" +
    "\046\016\043\020\061\022\056\025\070\026\021\027\026" +
    "\032\013\037\064\040\027\041\067\044\023\046\041\060" +
    "\022\064\004\065\033\066\050\102\030\104\057\105\060" +
    "\106\012\110\047\113\062\114\054\115\017\001\002\000" +
    "\004\005\u0150\001\002\000\102\003\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\016\ufff8\020\ufff8\022\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\032\ufff8\037\ufff8\040\ufff8\041\ufff8\044\ufff8" +
    "\046\ufff8\060\ufff8\064\ufff8\065\ufff8\066\ufff8\071\ufff8\102" +
    "\ufff8\104\ufff8\105\ufff8\106\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\113\ufff8\114\ufff8\115\ufff8\001\002\000\102\003\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\011\ufffa\016\ufffa\020\ufffa\022\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\032\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\044\ufffa\046\ufffa\060\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\071\ufffa\102\ufffa\104\ufffa\105\ufffa\106\ufffa\110\ufffa\111" +
    "\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa\001\002\000\004" +
    "\005\u014c\001\002\000\102\003\045\005\040\006\011\007" +
    "\044\011\046\016\043\020\061\022\056\024\ufffd\025\070" +
    "\026\021\032\013\037\064\040\027\041\067\044\023\046" +
    "\041\060\022\064\004\065\033\066\050\071\ufffd\102\030" +
    "\104\057\105\060\106\012\110\047\111\ufffd\112\ufffd\113" +
    "\062\114\054\115\017\001\002\000\142\003\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\020\uffae\022\uffae\024\uffae\025\uffae\026\uffae" +
    "\032\uffae\037\uffae\040\uffae\041\uffae\044\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\071\uffae\073\uffae\102\uffae\104\uffae\105\uffae" +
    "\106\uffae\110\uffae\111\uffae\112\uffae\113\uffae\114\uffae\115" +
    "\uffae\001\002\000\004\066\u013d\001\002\000\006\017\u011f" +
    "\043\u011e\001\002\000\004\024\u011b\001\002\000\116\003" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\016\uffbd\020\uffbd" +
    "\022\uffbd\024\uffbd\025\uffbd\026\uffbd\032\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\044\uffbd\046\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\071" +
    "\uffbd\073\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd\110\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\001\002\000" +
    "\102\003\uffec\005\uffec\006\uffec\007\uffec\011\uffec\016\uffec" +
    "\020\uffec\022\uffec\024\uffec\025\uffec\026\uffec\032\uffec\037" +
    "\uffec\040\uffec\041\uffec\044\uffec\046\uffec\060\uffec\064\uffec" +
    "\065\uffec\066\uffec\071\uffec\102\uffec\104\uffec\105\uffec\106" +
    "\uffec\110\uffec\111\uffec\112\uffec\113\uffec\114\uffec\115\uffec" +
    "\001\002\000\004\073\u011a\001\002\000\102\003\uffef\005" +
    "\uffef\006\uffef\007\uffef\011\uffef\016\uffef\020\uffef\022\uffef" +
    "\024\uffef\025\uffef\026\uffef\032\uffef\037\uffef\040\uffef\041" +
    "\uffef\044\uffef\046\uffef\060\uffef\064\uffef\065\uffef\066\uffef" +
    "\071\uffef\102\uffef\104\uffef\105\uffef\106\uffef\110\uffef\111" +
    "\uffef\112\uffef\113\uffef\114\uffef\115\uffef\001\002\000\004" +
    "\066\u0116\001\002\000\016\005\073\006\011\007\044\011" +
    "\046\060\022\066\050\001\002\000\004\066\u0111\001\002" +
    "\000\102\003\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\016" +
    "\ufff7\020\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\032\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\044\ufff7\046\ufff7\060\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\071\ufff7\102\ufff7\104\ufff7\105\ufff7" +
    "\106\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\115" +
    "\ufff7\001\002\000\102\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\032\uffeb\037\uffeb\040\uffeb\041\uffeb\044\uffeb\046\uffeb" +
    "\060\uffeb\064\uffeb\065\uffeb\066\uffeb\071\uffeb\102\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb" +
    "\114\uffeb\115\uffeb\001\002\000\004\073\u010d\001\002\000" +
    "\010\005\376\066\377\075\u0100\001\002\000\004\066\uffc9" +
    "\001\002\000\102\003\ufff5\005\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\016\ufff5\020\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\032\ufff5\037\ufff5\040\ufff5\041\ufff5\044\ufff5\046\ufff5\060" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\071\ufff5\102\ufff5\104\ufff5" +
    "\105\ufff5\106\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114" +
    "\ufff5\115\ufff5\001\002\000\102\003\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\016\ufff0\020\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\032\ufff0\037\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\046\ufff0\060\ufff0\064\ufff0\065\ufff0\066\ufff0\071\ufff0\102" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\110\ufff0\111\ufff0\112\ufff0" +
    "\113\ufff0\114\ufff0\115\ufff0\001\002\000\004\005\uffa6\001" +
    "\002\000\102\003\uffed\005\uffed\006\uffed\007\uffed\011\uffed" +
    "\016\uffed\020\uffed\022\uffed\024\uffed\025\uffed\026\uffed\032" +
    "\uffed\037\uffed\040\uffed\041\uffed\044\uffed\046\uffed\060\uffed" +
    "\064\uffed\065\uffed\066\uffed\071\uffed\102\uffed\104\uffed\105" +
    "\uffed\106\uffed\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed" +
    "\115\uffed\001\002\000\102\003\uffee\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\016\uffee\020\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\032\uffee\037\uffee\040\uffee\041\uffee\044\uffee\046" +
    "\uffee\060\uffee\064\uffee\065\uffee\066\uffee\071\uffee\102\uffee" +
    "\104\uffee\105\uffee\106\uffee\110\uffee\111\uffee\112\uffee\113" +
    "\uffee\114\uffee\115\uffee\001\002\000\142\003\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\075\011\077\013\102\014\101\015" +
    "\100\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\032\uffbb\037\uffbb\040\uffbb\041\uffbb\044\uffbb\046\uffbb\047" +
    "\361\050\364\051\357\052\360\053\362\054\363\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\071\uffbb\073\uffbb\102\uffbb\104\uffbb\105\uffbb" +
    "\106\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb\115" +
    "\uffbb\001\002\000\102\003\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\016\ufff4\020\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\032\ufff4\037\ufff4\040\ufff4\041\ufff4\044\ufff4\046\ufff4" +
    "\060\ufff4\064\ufff4\065\ufff4\066\ufff4\071\ufff4\102\ufff4\104" +
    "\ufff4\105\ufff4\106\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4" +
    "\114\ufff4\115\ufff4\001\002\000\140\003\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\032" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\044\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\071\uffaf\075\353\102\uffaf\104\uffaf\105\uffaf\106\uffaf\110" +
    "\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\001\002" +
    "\000\004\070\342\001\002\000\102\003\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\011\ufff3\016\ufff3\020\ufff3\022\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3\044" +
    "\ufff3\046\ufff3\060\ufff3\064\ufff3\065\ufff3\066\ufff3\071\ufff3" +
    "\102\ufff3\104\ufff3\105\ufff3\106\ufff3\110\ufff3\111\ufff3\112" +
    "\ufff3\113\ufff3\114\ufff3\115\ufff3\001\002\000\006\005\317" +
    "\075\320\001\002\000\142\003\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\020\uffad\022\uffad\024\uffad\025\uffad\026\uffad\032\uffad\037" +
    "\uffad\040\uffad\041\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\071\uffad\073\uffad\102\uffad\104\uffad\105\uffad\106\uffad\110" +
    "\uffad\111\uffad\112\uffad\113\uffad\114\uffad\115\uffad\001\002" +
    "\000\006\071\316\073\315\001\002\000\014\005\073\006" +
    "\011\007\044\011\046\066\050\001\002\000\004\066\267" +
    "\001\002\000\016\005\073\006\011\007\044\011\046\060" +
    "\022\066\050\001\002\000\102\003\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\016\ufff2\020\ufff2\022\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\032\ufff2\037\ufff2\040\ufff2\041\ufff2\044\ufff2" +
    "\046\ufff2\060\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\102" +
    "\ufff2\104\ufff2\105\ufff2\106\ufff2\110\ufff2\111\ufff2\112\ufff2" +
    "\113\ufff2\114\ufff2\115\ufff2\001\002\000\112\003\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\016\ufffc\020\ufffc\022\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\032\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\044\ufffc\046\ufffc\055\200\056\175\057\177\060\ufffc" +
    "\061\174\064\ufffc\065\ufffc\066\ufffc\071\ufffc\102\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc" +
    "\114\ufffc\115\ufffc\001\002\000\102\003\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\016\ufffb\020\ufffb\022\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\032\ufffb\037\ufffb\040\ufffb\041\ufffb\044" +
    "\ufffb\046\ufffb\060\ufffb\064\ufffb\065\ufffb\066\ufffb\071\ufffb" +
    "\102\ufffb\104\ufffb\105\ufffb\106\ufffb\110\ufffb\111\ufffb\112" +
    "\ufffb\113\ufffb\114\ufffb\115\ufffb\001\002\000\004\073\264" +
    "\001\002\000\102\003\ufff1\005\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\016\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\032\ufff1\037\ufff1\040\ufff1\041\ufff1\044\ufff1\046\ufff1\060" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\071\ufff1\102\ufff1\104\ufff1" +
    "\105\ufff1\106\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\114" +
    "\ufff1\115\ufff1\001\002\000\010\005\245\066\246\075\247" +
    "\001\002\000\004\070\233\001\002\000\004\070\221\001" +
    "\002\000\004\005\uffa5\001\002\000\004\066\163\001\002" +
    "\000\004\002\162\001\002\000\004\075\157\001\002\000" +
    "\102\003\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\016\ufff9" +
    "\020\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\032\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\044\ufff9\046\ufff9\060\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\071\ufff9\102\ufff9\104\ufff9\105\ufff9\106" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\001\002\000\102\003\ufff6\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\016\ufff6\020\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\032\ufff6\037\ufff6\040\ufff6\041\ufff6\044\ufff6\046\ufff6\060" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6\102\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114" +
    "\ufff6\115\ufff6\001\002\000\010\005\110\066\111\075\112" +
    "\001\002\000\004\005\071\001\002\000\004\075\072\001" +
    "\002\000\014\005\073\006\011\007\044\011\046\066\050" +
    "\001\002\000\142\003\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf" +
    "\022\uffaf\024\uffaf\025\uffaf\026\uffaf\032\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\071\uffaf" +
    "\073\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf\110\uffaf\111" +
    "\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\001\002\000\016" +
    "\010\075\011\077\013\102\014\101\015\100\073\076\001" +
    "\002\000\014\005\073\006\011\007\044\011\046\066\050" +
    "\001\002\000\102\003\uffa8\005\uffa8\006\uffa8\007\uffa8\011" +
    "\uffa8\016\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\032\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8\046\uffa8\060" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\071\uffa8\102\uffa8\104\uffa8" +
    "\105\uffa8\106\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114" +
    "\uffa8\115\uffa8\001\002\000\014\005\073\006\011\007\044" +
    "\011\046\066\050\001\002\000\014\005\073\006\011\007" +
    "\044\011\046\066\050\001\002\000\014\005\073\006\011" +
    "\007\044\011\046\066\050\001\002\000\014\005\073\006" +
    "\011\007\044\011\046\066\050\001\002\000\142\003\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2\014" +
    "\uffb2\015\100\016\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\032\uffb2\037\uffb2\040\uffb2\041\uffb2\044\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\071\uffb2\073\uffb2\102\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\114" +
    "\uffb2\115\uffb2\001\002\000\142\003\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\100\016" +
    "\uffb1\020\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\032\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\044\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\071\uffb1\073\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\001" +
    "\002\000\142\003\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\013\uffb0\014\uffb0\015\100\016\uffb0\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\032\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\073" +
    "\uffb0\102\uffb0\104\uffb0\105\uffb0\106\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\113\uffb0\114\uffb0\115\uffb0\001\002\000\142\003" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013\102" +
    "\014\101\015\100\016\uffb3\020\uffb3\022\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\032\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\071\uffb3\073\uffb3\102\uffb3\104" +
    "\uffb3\105\uffb3\106\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3" +
    "\114\uffb3\115\uffb3\001\002\000\142\003\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\013\102\014\101\015\100" +
    "\016\uffb4\020\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\032" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\044\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\071\uffb4\073\uffb4\102\uffb4\104\uffb4\105\uffb4\106" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4" +
    "\001\002\000\004\075\152\001\002\000\006\070\114\077" +
    "\116\001\002\000\004\066\113\001\002\000\006\070\114" +
    "\077\116\001\002\000\004\077\125\001\002\000\004\067" +
    "\131\001\002\000\004\072\117\001\002\000\004\076\120" +
    "\001\002\000\004\072\121\001\002\000\006\070\122\077" +
    "\123\001\002\000\004\077\125\001\002\000\004\067\uff98" +
    "\001\002\000\004\071\130\001\002\000\012\067\uff99\071" +
    "\uff99\072\126\073\uff99\001\002\000\004\077\125\001\002" +
    "\000\010\067\uff9a\071\uff9a\073\uff9a\001\002\000\004\067" +
    "\uff96\001\002\000\104\003\uff80\005\uff80\006\uff80\007\uff80" +
    "\011\uff80\016\uff80\020\uff80\022\uff80\024\uff80\025\uff80\026" +
    "\uff80\032\uff80\037\uff80\040\uff80\041\uff80\044\uff80\046\uff80" +
    "\060\uff80\064\uff80\065\uff80\066\uff80\071\uff80\073\132\102" +
    "\uff80\104\uff80\105\uff80\106\uff80\110\uff80\111\uff80\112\uff80" +
    "\113\uff80\114\uff80\115\uff80\001\002\000\102\003\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\011\uff9d\016\uff9d\020\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\032\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\044\uff9d\046\uff9d\060\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\071\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d\110\uff9d\111" +
    "\uff9d\112\uff9d\113\uff9d\114\uff9d\115\uff9d\001\002\000\004" +
    "\071\134\001\002\000\004\072\135\001\002\000\004\076" +
    "\136\001\002\000\004\072\137\001\002\000\006\070\140" +
    "\077\141\001\002\000\004\100\142\001\002\000\004\067" +
    "\uff97\001\002\000\006\071\uff9b\072\145\001\002\000\004" +
    "\071\144\001\002\000\004\067\uff95\001\002\000\004\100" +
    "\142\001\002\000\004\071\uff9c\001\002\000\004\067\150" +
    "\001\002\000\004\073\151\001\002\000\102\003\uff81\005" +
    "\uff81\006\uff81\007\uff81\011\uff81\016\uff81\020\uff81\022\uff81" +
    "\024\uff81\025\uff81\026\uff81\032\uff81\037\uff81\040\uff81\041" +
    "\uff81\044\uff81\046\uff81\060\uff81\064\uff81\065\uff81\066\uff81" +
    "\071\uff81\102\uff81\104\uff81\105\uff81\106\uff81\110\uff81\111" +
    "\uff81\112\uff81\113\uff81\114\uff81\115\uff81\001\002\000\004" +
    "\066\153\001\002\000\006\070\114\077\116\001\002\000" +
    "\004\067\155\001\002\000\004\073\156\001\002\000\102" +
    "\003\uff82\005\uff82\006\uff82\007\uff82\011\uff82\016\uff82\020" +
    "\uff82\022\uff82\024\uff82\025\uff82\026\uff82\032\uff82\037\uff82" +
    "\040\uff82\041\uff82\044\uff82\046\uff82\060\uff82\064\uff82\065" +
    "\uff82\066\uff82\071\uff82\102\uff82\104\uff82\105\uff82\106\uff82" +
    "\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\001" +
    "\002\000\004\077\160\001\002\000\104\003\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\011\uff7c\016\uff7c\020\uff7c\022\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\032\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\044\uff7c\046\uff7c\060\uff7c\064\uff7c\065\uff7c\066\uff7c\071" +
    "\uff7c\073\161\102\uff7c\104\uff7c\105\uff7c\106\uff7c\110\uff7c" +
    "\111\uff7c\112\uff7c\113\uff7c\114\uff7c\115\uff7c\001\002\000" +
    "\102\003\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\016\uff9f" +
    "\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\032\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\044\uff9f\046\uff9f\060\uff9f\064\uff9f" +
    "\065\uff9f\066\uff9f\071\uff9f\102\uff9f\104\uff9f\105\uff9f\106" +
    "\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f" +
    "\001\002\000\004\002\001\001\002\000\004\064\164\001" +
    "\002\000\004\005\165\001\002\000\004\075\uffcf\001\002" +
    "\000\004\075\167\001\002\000\014\005\073\006\011\007" +
    "\044\011\046\066\050\001\002\000\016\010\075\011\077" +
    "\013\102\014\101\015\100\073\171\001\002\000\016\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\060\uffce\066\uffce\001\002" +
    "\000\016\005\073\006\011\007\044\011\046\060\022\066" +
    "\050\001\002\000\014\055\200\056\175\057\177\061\174" +
    "\073\176\001\002\000\016\005\uffc0\006\uffc0\007\uffc0\011" +
    "\uffc0\060\uffc0\066\uffc0\001\002\000\016\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\060\uffc4\066\uffc4\001\002\000\006\062" +
    "\uffcd\063\uffcd\001\002\000\016\005\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\060\uffc2\066\uffc2\001\002\000\016\005\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\060\uffc6\066\uffc6\001\002\000\016" +
    "\005\073\006\011\007\044\011\046\060\022\066\050\001" +
    "\002\000\116\003\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5" +
    "\016\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\032" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\044\uffc5\046\uffc5\055\uffc5" +
    "\056\175\057\uffc5\060\uffc5\061\174\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\071\uffc5\073\uffc5\102\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115" +
    "\uffc5\001\002\000\016\005\073\006\011\007\044\011\046" +
    "\060\022\066\050\001\002\000\116\003\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\016\uffc1\020\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\032\uffc1\037\uffc1\040\uffc1\041\uffc1\044" +
    "\uffc1\046\uffc1\055\uffc1\056\175\057\uffc1\060\uffc1\061\174" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\071\uffc1\073\uffc1\102" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\110\uffc1\111\uffc1\112\uffc1" +
    "\113\uffc1\114\uffc1\115\uffc1\001\002\000\006\062\207\063" +
    "\210\001\002\000\004\067\211\001\002\000\004\067\uffcb" +
    "\001\002\000\004\067\uffca\001\002\000\004\070\212\001" +
    "\002\000\072\003\045\005\040\006\011\007\044\011\046" +
    "\016\043\020\061\022\056\025\070\026\021\032\013\037" +
    "\064\040\027\041\067\044\023\046\041\060\022\064\004" +
    "\065\033\066\050\102\030\104\057\105\060\106\012\110" +
    "\047\113\062\114\054\115\017\001\002\000\004\071\214" +
    "\001\002\000\102\003\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\032\uffcc\037\uffcc\040\uffcc\041\uffcc\044\uffcc\046\uffcc\060" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\071\uffcc\102\uffcc\104\uffcc" +
    "\105\uffcc\106\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\114" +
    "\uffcc\115\uffcc\001\002\000\016\005\073\006\011\007\044" +
    "\011\046\060\022\066\050\001\002\000\116\003\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\016\uffc3\020\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\032\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\044\uffc3\046\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3\073" +
    "\uffc3\102\uffc3\104\uffc3\105\uffc3\106\uffc3\110\uffc3\111\uffc3" +
    "\112\uffc3\113\uffc3\114\uffc3\115\uffc3\001\002\000\016\005" +
    "\073\006\011\007\044\011\046\060\022\066\050\001\002" +
    "\000\116\003\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\016" +
    "\uffbf\020\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\032\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\044\uffbf\046\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\071\uffbf\073\uffbf\102\uffbf\104\uffbf\105\uffbf\106" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf" +
    "\001\002\000\072\003\uffdb\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\016\uffdb\020\uffdb\022\uffdb\025\uffdb\026\uffdb\032\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\044\uffdb\046\uffdb\060\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\102\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\110\uffdb\113\uffdb\114\uffdb\115\uffdb\001\002\000\072\003" +
    "\045\005\040\006\011\007\044\011\046\016\043\020\061" +
    "\022\056\025\070\026\021\032\013\037\064\040\027\041" +
    "\067\044\023\046\041\060\022\064\004\065\033\066\050" +
    "\102\030\104\057\105\060\106\012\110\047\113\062\114" +
    "\054\115\017\001\002\000\004\071\224\001\002\000\004" +
    "\102\225\001\002\000\004\066\uffda\001\002\000\004\066" +
    "\227\001\002\000\016\005\073\006\011\007\044\011\046" +
    "\060\022\066\050\001\002\000\014\055\200\056\175\057" +
    "\177\061\174\067\231\001\002\000\004\073\232\001\002" +
    "\000\102\003\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\016" +
    "\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\032\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\044\uffd9\046\uffd9\060\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\071\uffd9\102\uffd9\104\uffd9\105\uffd9" +
    "\106\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\114\uffd9\115" +
    "\uffd9\001\002\000\072\003\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\016\uffd8\020\uffd8\022\uffd8\025\uffd8\026\uffd8\032" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\044\uffd8\046\uffd8\060\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\102\uffd8\104\uffd8\105\uffd8\106" +
    "\uffd8\110\uffd8\113\uffd8\114\uffd8\115\uffd8\001\002\000\072" +
    "\003\045\005\040\006\011\007\044\011\046\016\043\020" +
    "\061\022\056\025\070\026\021\032\013\037\064\040\027" +
    "\041\067\044\023\046\041\060\022\064\004\065\033\066" +
    "\050\102\030\104\057\105\060\106\012\110\047\113\062" +
    "\114\054\115\017\001\002\000\004\071\236\001\002\000" +
    "\004\103\237\001\002\000\004\066\uffd7\001\002\000\004" +
    "\066\241\001\002\000\016\005\073\006\011\007\044\011" +
    "\046\060\022\066\050\001\002\000\014\055\200\056\175" +
    "\057\177\061\174\067\243\001\002\000\004\073\244\001" +
    "\002\000\102\003\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\016\uffd6\020\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\032" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\044\uffd6\046\uffd6\060\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\071\uffd6\102\uffd6\104\uffd6\105" +
    "\uffd6\106\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6" +
    "\115\uffd6\001\002\000\004\075\257\001\002\000\004\077" +
    "\125\001\002\000\004\066\250\001\002\000\004\077\125" +
    "\001\002\000\004\067\252\001\002\000\104\003\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\011\uffa0\016\uffa0\020\uffa0\022\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\032\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\044\uffa0\046\uffa0\060\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\071\uffa0\073\253\102\uffa0\104\uffa0\105\uffa0\106\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0\001\002" +
    "\000\102\003\uffa1\005\uffa1\006\uffa1\007\uffa1\011\uffa1\016" +
    "\uffa1\020\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\032\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\044\uffa1\046\uffa1\060\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\071\uffa1\102\uffa1\104\uffa1\105\uffa1" +
    "\106\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115" +
    "\uffa1\001\002\000\004\067\255\001\002\000\004\073\256" +
    "\001\002\000\102\003\uff85\005\uff85\006\uff85\007\uff85\011" +
    "\uff85\016\uff85\020\uff85\022\uff85\024\uff85\025\uff85\026\uff85" +
    "\032\uff85\037\uff85\040\uff85\041\uff85\044\uff85\046\uff85\060" +
    "\uff85\064\uff85\065\uff85\066\uff85\071\uff85\102\uff85\104\uff85" +
    "\105\uff85\106\uff85\110\uff85\111\uff85\112\uff85\113\uff85\114" +
    "\uff85\115\uff85\001\002\000\004\066\260\001\002\000\004" +
    "\077\125\001\002\000\004\067\262\001\002\000\004\073" +
    "\263\001\002\000\102\003\uff86\005\uff86\006\uff86\007\uff86" +
    "\011\uff86\016\uff86\020\uff86\022\uff86\024\uff86\025\uff86\026" +
    "\uff86\032\uff86\037\uff86\040\uff86\041\uff86\044\uff86\046\uff86" +
    "\060\uff86\064\uff86\065\uff86\066\uff86\071\uff86\102\uff86\104" +
    "\uff86\105\uff86\106\uff86\110\uff86\111\uff86\112\uff86\113\uff86" +
    "\114\uff86\115\uff86\001\002\000\102\003\uffea\005\uffea\006" +
    "\uffea\007\uffea\011\uffea\016\uffea\020\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\032\uffea\037\uffea\040\uffea\041\uffea\044" +
    "\uffea\046\uffea\060\uffea\064\uffea\065\uffea\066\uffea\071\uffea" +
    "\102\uffea\104\uffea\105\uffea\106\uffea\110\uffea\111\uffea\112" +
    "\uffea\113\uffea\114\uffea\115\uffea\001\002\000\014\055\200" +
    "\056\175\057\177\061\174\067\266\001\002\000\142\003" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025" +
    "\uffab\026\uffab\032\uffab\037\uffab\040\uffab\041\uffab\044\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\071\uffab\073\uffab\102\uffab\104" +
    "\uffab\105\uffab\106\uffab\110\uffab\111\uffab\112\uffab\113\uffab" +
    "\114\uffab\115\uffab\001\002\000\014\005\073\006\011\007" +
    "\044\011\046\066\050\001\002\000\016\010\075\011\077" +
    "\013\102\014\101\015\100\067\uffe6\001\002\000\004\067" +
    "\272\001\002\000\004\070\273\001\002\000\004\111\276" +
    "\001\002\000\010\071\uffdc\111\276\112\305\001\002\000" +
    "\010\071\uffe3\111\uffe3\112\uffe3\001\002\000\006\006\301" +
    "\007\300\001\002\000\004\074\uffe2\001\002\000\004\074" +
    "\uffdf\001\002\000\004\074\uffe0\001\002\000\004\074\303" +
    "\001\002\000\072\003\045\005\040\006\011\007\044\011" +
    "\046\016\043\020\061\022\056\025\070\026\021\032\013" +
    "\037\064\040\027\041\067\044\023\046\041\060\022\064" +
    "\004\065\033\066\050\102\030\104\057\105\060\106\012" +
    "\110\047\113\062\114\054\115\017\001\002\000\010\071" +
    "\uffe1\111\uffe1\112\uffe1\001\002\000\004\074\uffde\001\002" +
    "\000\004\071\310\001\002\000\010\071\uffe4\111\uffe4\112" +
    "\uffe4\001\002\000\102\003\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\016\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\032\uffe5\037\uffe5\040\uffe5\041\uffe5\044\uffe5\046\uffe5" +
    "\060\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5\102\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5" +
    "\114\uffe5\115\uffe5\001\002\000\004\074\312\001\002\000" +
    "\072\003\045\005\040\006\011\007\044\011\046\016\043" +
    "\020\061\022\056\025\070\026\021\032\013\037\064\040" +
    "\027\041\067\044\023\046\041\060\022\064\004\065\033" +
    "\066\050\102\030\104\057\105\060\106\012\110\047\113" +
    "\062\114\054\115\017\001\002\000\004\071\uffdd\001\002" +
    "\000\142\003\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\013\102\014\101\015\100\016\uffac\020\uffac\022\uffac" +
    "\024\uffac\025\uffac\026\uffac\032\uffac\037\uffac\040\uffac\041" +
    "\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\064\uffac\065\uffac\066\uffac\067\uffac\071\uffac\073\uffac" +
    "\102\uffac\104\uffac\105\uffac\106\uffac\110\uffac\111\uffac\112" +
    "\uffac\113\uffac\114\uffac\115\uffac\001\002\000\102\003\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\016\uffe8\020\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\032\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\044\uffe8\046\uffe8\060\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\071\uffe8\102\uffe8\104\uffe8\105\uffe8\106\uffe8\110\uffe8" +
    "\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8\001\002\000" +
    "\102\003\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\016\uffe7" +
    "\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\032\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\044\uffe7\046\uffe7\060\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\071\uffe7\102\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7" +
    "\001\002\000\004\075\332\001\002\000\004\066\321\001" +
    "\002\000\006\076\324\077\125\001\002\000\004\067\331" +
    "\001\002\000\004\067\327\001\002\000\010\067\uffa2\072" +
    "\325\073\uffa2\001\002\000\004\076\324\001\002\000\006" +
    "\067\uffa3\073\uffa3\001\002\000\004\073\330\001\002\000" +
    "\104\003\uff89\005\uff89\006\uff89\007\uff89\011\uff89\016\uff89" +
    "\020\uff89\022\uff89\024\uff89\025\uff89\026\uff89\032\uff89\037" +
    "\uff89\040\uff89\041\uff89\044\uff89\046\uff89\060\uff89\064\uff89" +
    "\065\uff89\066\uff89\071\uff89\101\uff89\102\uff89\104\uff89\105" +
    "\uff89\106\uff89\110\uff89\111\uff89\112\uff89\113\uff89\114\uff89" +
    "\115\uff89\001\002\000\102\003\uff84\005\uff84\006\uff84\007" +
    "\uff84\011\uff84\016\uff84\020\uff84\022\uff84\024\uff84\025\uff84" +
    "\026\uff84\032\uff84\037\uff84\040\uff84\041\uff84\044\uff84\046" +
    "\uff84\060\uff84\064\uff84\065\uff84\066\uff84\071\uff84\102\uff84" +
    "\104\uff84\105\uff84\106\uff84\110\uff84\111\uff84\112\uff84\113" +
    "\uff84\114\uff84\115\uff84\001\002\000\004\066\333\001\002" +
    "\000\006\076\324\077\125\001\002\000\004\073\341\001" +
    "\002\000\006\067\336\073\337\001\002\000\106\003\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\011\uff8a\016\uff8a\020\uff8a\022" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\032\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\044\uff8a\046\uff8a\060\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\071\uff8a\073\340\101\uff8a\102\uff8a\104\uff8a\105\uff8a" +
    "\106\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115" +
    "\uff8a\001\002\000\104\003\uff88\005\uff88\006\uff88\007\uff88" +
    "\011\uff88\016\uff88\020\uff88\022\uff88\024\uff88\025\uff88\026" +
    "\uff88\032\uff88\037\uff88\040\uff88\041\uff88\044\uff88\046\uff88" +
    "\060\uff88\064\uff88\065\uff88\066\uff88\071\uff88\101\uff88\102" +
    "\uff88\104\uff88\105\uff88\106\uff88\110\uff88\111\uff88\112\uff88" +
    "\113\uff88\114\uff88\115\uff88\001\002\000\104\003\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\011\uffa4\016\uffa4\020\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\032\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\044\uffa4\046\uffa4\060\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\071\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\110" +
    "\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\001\002" +
    "\000\104\003\uff87\005\uff87\006\uff87\007\uff87\011\uff87\016" +
    "\uff87\020\uff87\022\uff87\024\uff87\025\uff87\026\uff87\032\uff87" +
    "\037\uff87\040\uff87\041\uff87\044\uff87\046\uff87\060\uff87\064" +
    "\uff87\065\uff87\066\uff87\071\uff87\101\uff87\102\uff87\104\uff87" +
    "\105\uff87\106\uff87\110\uff87\111\uff87\112\uff87\113\uff87\114" +
    "\uff87\115\uff87\001\002\000\004\005\343\001\002\000\004" +
    "\066\346\001\002\000\004\071\345\001\002\000\102\003" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\011\uff8e\016\uff8e\020\uff8e" +
    "\022\uff8e\024\uff8e\025\uff8e\026\uff8e\032\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\044\uff8e\046\uff8e\060\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\071\uff8e\102\uff8e\104\uff8e\105\uff8e\106\uff8e\110" +
    "\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\001\002" +
    "\000\004\067\347\001\002\000\004\073\350\001\002\000" +
    "\006\071\uff8c\101\351\001\002\000\004\005\343\001\002" +
    "\000\004\071\uff8d\001\002\000\014\005\073\006\011\007" +
    "\044\011\046\066\050\001\002\000\016\010\075\011\077" +
    "\013\102\014\101\015\100\073\355\001\002\000\102\003" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\016\uffaa\020\uffaa" +
    "\022\uffaa\024\uffaa\025\uffaa\026\uffaa\032\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\044\uffaa\046\uffaa\060\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\071\uffaa\102\uffaa\104\uffaa\105\uffaa\106\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa\001\002" +
    "\000\014\005\073\006\011\007\044\011\046\066\050\001" +
    "\002\000\014\005\uffb8\006\uffb8\007\uffb8\011\uffb8\066\uffb8" +
    "\001\002\000\014\005\uffb7\006\uffb7\007\uffb7\011\uffb7\066" +
    "\uffb7\001\002\000\014\005\uffba\006\uffba\007\uffba\011\uffba" +
    "\066\uffba\001\002\000\014\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\066\uffb6\001\002\000\014\005\uffb5\006\uffb5\007\uffb5" +
    "\011\uffb5\066\uffb5\001\002\000\014\005\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\066\uffb9\001\002\000\126\003\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\075\011\077\013\102\014\101\015" +
    "\100\016\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\032\uffbc\037\uffbc\040\uffbc\041\uffbc\044\uffbc\046\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\067\uffbc\071\uffbc\073\uffbc\102\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc" +
    "\115\uffbc\001\002\000\004\066\367\001\002\000\016\005" +
    "\073\006\011\007\044\011\046\060\022\066\050\001\002" +
    "\000\014\055\200\056\175\057\177\061\174\067\371\001" +
    "\002\000\004\070\uffc8\001\002\000\004\070\373\001\002" +
    "\000\072\003\045\005\040\006\011\007\044\011\046\016" +
    "\043\020\061\022\056\025\070\026\021\032\013\037\064" +
    "\040\027\041\067\044\023\046\041\060\022\064\004\065" +
    "\033\066\050\102\030\104\057\105\060\106\012\110\047" +
    "\113\062\114\054\115\017\001\002\000\004\071\375\001" +
    "\002\000\102\003\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\016\uffc7\020\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\032" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7\046\uffc7\060\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\071\uffc7\102\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7" +
    "\115\uffc7\001\002\000\004\075\u0108\001\002\000\004\077" +
    "\125\001\002\000\004\066\u0101\001\002\000\004\077\125" +
    "\001\002\000\004\067\u0103\001\002\000\104\003\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\011\uff7d\016\uff7d\020\uff7d\022\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\032\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\044\uff7d\046\uff7d\060\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\071\uff7d\073\u0104\102\uff7d\104\uff7d\105\uff7d\106\uff7d\110" +
    "\uff7d\111\uff7d\112\uff7d\113\uff7d\114\uff7d\115\uff7d\001\002" +
    "\000\102\003\uff9e\005\uff9e\006\uff9e\007\uff9e\011\uff9e\016" +
    "\uff9e\020\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\032\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\044\uff9e\046\uff9e\060\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\071\uff9e\102\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115" +
    "\uff9e\001\002\000\004\067\u0106\001\002\000\004\073\u0107" +
    "\001\002\000\102\003\uff7e\005\uff7e\006\uff7e\007\uff7e\011" +
    "\uff7e\016\uff7e\020\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\032\uff7e\037\uff7e\040\uff7e\041\uff7e\044\uff7e\046\uff7e\060" +
    "\uff7e\064\uff7e\065\uff7e\066\uff7e\071\uff7e\102\uff7e\104\uff7e" +
    "\105\uff7e\106\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114" +
    "\uff7e\115\uff7e\001\002\000\004\066\u0109\001\002\000\004" +
    "\077\125\001\002\000\004\067\u010b\001\002\000\004\073" +
    "\u010c\001\002\000\102\003\uff7f\005\uff7f\006\uff7f\007\uff7f" +
    "\011\uff7f\016\uff7f\020\uff7f\022\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\032\uff7f\037\uff7f\040\uff7f\041\uff7f\044\uff7f\046\uff7f" +
    "\060\uff7f\064\uff7f\065\uff7f\066\uff7f\071\uff7f\102\uff7f\104" +
    "\uff7f\105\uff7f\106\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f" +
    "\114\uff7f\115\uff7f\001\002\000\072\003\045\005\040\006" +
    "\011\007\044\011\046\016\043\020\061\022\056\025\070" +
    "\026\021\032\013\037\064\040\027\041\067\044\023\046" +
    "\041\060\022\064\004\065\033\066\050\102\030\104\057" +
    "\105\060\106\012\110\047\113\062\114\054\115\017\001" +
    "\002\000\004\024\u010f\001\002\000\006\002\uff8b\073\u0110" +
    "\001\002\000\004\002\uffff\001\002\000\004\005\u0112\001" +
    "\002\000\004\067\u0113\001\002\000\004\073\u0114\001\002" +
    "\000\102\003\uff8f\005\uff8f\006\uff8f\007\uff8f\011\uff8f\016" +
    "\uff8f\020\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\032\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\044\uff8f\046\uff8f\060\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\071\uff8f\102\uff8f\104\uff8f\105\uff8f" +
    "\106\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\115" +
    "\uff8f\001\002\000\116\003\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\016\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\032\uffbe\037\uffbe\040\uffbe\041\uffbe\044\uffbe\046\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\071\uffbe\073\uffbe\102\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114" +
    "\uffbe\115\uffbe\001\002\000\004\005\u0117\001\002\000\004" +
    "\067\u0118\001\002\000\004\073\u0119\001\002\000\102\003" +
    "\uff90\005\uff90\006\uff90\007\uff90\011\uff90\016\uff90\020\uff90" +
    "\022\uff90\024\uff90\025\uff90\026\uff90\032\uff90\037\uff90\040" +
    "\uff90\041\uff90\044\uff90\046\uff90\060\uff90\064\uff90\065\uff90" +
    "\066\uff90\071\uff90\102\uff90\104\uff90\105\uff90\106\uff90\110" +
    "\uff90\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90\001\002" +
    "\000\102\003\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\016" +
    "\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\032\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\044\uffe9\046\uffe9\060\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\071\uffe9\102\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115" +
    "\uffe9\001\002\000\004\073\u011c\001\002\000\004\003\u011d" +
    "\001\002\000\004\002\000\001\002\000\004\005\u012b\001" +
    "\002\000\006\005\u0120\066\u0121\001\002\000\004\066\u0126" +
    "\001\002\000\004\067\u0122\001\002\000\004\070\u0123\001" +
    "\002\000\072\003\045\005\040\006\011\007\044\011\046" +
    "\016\043\020\061\022\056\025\070\026\021\032\013\037" +
    "\064\040\027\041\067\044\023\046\041\060\022\064\004" +
    "\065\033\066\050\102\030\104\057\105\060\106\012\110" +
    "\047\113\062\114\054\115\017\001\002\000\004\071\u0125" +
    "\001\002\000\102\003\uff83\005\uff83\006\uff83\007\uff83\011" +
    "\uff83\016\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83" +
    "\032\uff83\037\uff83\040\uff83\041\uff83\044\uff83\046\uff83\060" +
    "\uff83\064\uff83\065\uff83\066\uff83\071\uff83\102\uff83\104\uff83" +
    "\105\uff83\106\uff83\110\uff83\111\uff83\112\uff83\113\uff83\114" +
    "\uff83\115\uff83\001\002\000\004\067\u0127\001\002\000\004" +
    "\070\u0128\001\002\000\072\003\045\005\040\006\011\007" +
    "\044\011\046\016\043\020\061\022\056\025\070\026\021" +
    "\032\013\037\064\040\027\041\067\044\023\046\041\060" +
    "\022\064\004\065\033\066\050\102\030\104\057\105\060" +
    "\106\012\110\047\113\062\114\054\115\017\001\002\000" +
    "\004\071\u012a\001\002\000\102\003\uff94\005\uff94\006\uff94" +
    "\007\uff94\011\uff94\016\uff94\020\uff94\022\uff94\024\uff94\025" +
    "\uff94\026\uff94\032\uff94\037\uff94\040\uff94\041\uff94\044\uff94" +
    "\046\uff94\060\uff94\064\uff94\065\uff94\066\uff94\071\uff94\102" +
    "\uff94\104\uff94\105\uff94\106\uff94\110\uff94\111\uff94\112\uff94" +
    "\113\uff94\114\uff94\115\uff94\001\002\000\004\066\u012c\001" +
    "\002\000\004\067\u012d\001\002\000\004\070\u012e\001\002" +
    "\000\004\016\u0130\001\002\000\004\071\u013c\001\002\000" +
    "\006\005\317\075\u013a\001\002\000\004\101\u0132\001\002" +
    "\000\004\023\u0133\001\002\000\004\005\u0134\001\002\000" +
    "\004\075\u0135\001\002\000\004\066\u0136\001\002\000\004" +
    "\067\uff91\001\002\000\004\067\u0138\001\002\000\004\073" +
    "\u0139\001\002\000\004\071\uff92\001\002\000\004\066\u013b" +
    "\001\002\000\004\076\324\001\002\000\102\003\uff93\005" +
    "\uff93\006\uff93\007\uff93\011\uff93\016\uff93\020\uff93\022\uff93" +
    "\024\uff93\025\uff93\026\uff93\032\uff93\037\uff93\040\uff93\041" +
    "\uff93\044\uff93\046\uff93\060\uff93\064\uff93\065\uff93\066\uff93" +
    "\071\uff93\102\uff93\104\uff93\105\uff93\106\uff93\110\uff93\111" +
    "\uff93\112\uff93\113\uff93\114\uff93\115\uff93\001\002\000\016" +
    "\005\073\006\011\007\044\011\046\060\022\066\050\001" +
    "\002\000\014\055\200\056\175\057\177\061\174\067\uffd5" +
    "\001\002\000\004\067\u0140\001\002\000\004\070\u0141\001" +
    "\002\000\072\003\045\005\040\006\011\007\044\011\046" +
    "\016\043\020\061\022\056\025\070\026\021\032\013\037" +
    "\064\040\027\041\067\044\023\046\041\060\022\064\004" +
    "\065\033\066\050\102\030\104\057\105\060\106\012\110" +
    "\047\113\062\114\054\115\017\001\002\000\004\071\u0143" +
    "\001\002\000\104\003\uffd4\005\uffd4\006\uffd4\007\uffd4\011" +
    "\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\032\uffd4\037\uffd4\040\uffd4\041\uffd4\044\uffd4\046\uffd4\060" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\071\uffd4\102\uffd4\104\uffd4" +
    "\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113" +
    "\uffd4\114\uffd4\115\uffd4\001\002\000\104\003\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\016\uffd0\020\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\032\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\046\uffd0\060\uffd0\064\uffd0\065\uffd0\066\uffd0\071" +
    "\uffd0\102\uffd0\104\uffd0\105\uffd0\106\uffd0\107\u0146\110\uffd0" +
    "\111\uffd0\112\uffd0\113\uffd0\114\uffd0\115\uffd0\001\002\000" +
    "\102\003\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016\uffd3" +
    "\020\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\046\uffd3\060\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\071\uffd3\102\uffd3\104\uffd3\105\uffd3\106" +
    "\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3" +
    "\001\002\000\004\070\uffd2\001\002\000\004\070\u0148\001" +
    "\002\000\072\003\045\005\040\006\011\007\044\011\046" +
    "\016\043\020\061\022\056\025\070\026\021\032\013\037" +
    "\064\040\027\041\067\044\023\046\041\060\022\064\004" +
    "\065\033\066\050\102\030\104\057\105\060\106\012\110" +
    "\047\113\062\114\054\115\017\001\002\000\004\071\u014a" +
    "\001\002\000\102\003\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\016\uffd1\020\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\032\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1\046\uffd1\060" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\071\uffd1\102\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\114" +
    "\uffd1\115\uffd1\001\002\000\012\024\ufffe\071\ufffe\111\ufffe" +
    "\112\ufffe\001\002\000\106\003\uff7b\005\uff7b\006\uff7b\007" +
    "\uff7b\011\uff7b\016\uff7b\020\uff7b\022\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\032\uff7b\037\uff7b\040\uff7b\041\uff7b\044\uff7b\046" +
    "\uff7b\060\uff7b\064\uff7b\065\uff7b\066\uff7b\071\uff7b\073\u014d" +
    "\075\u014e\102\uff7b\104\uff7b\105\uff7b\106\uff7b\110\uff7b\111" +
    "\uff7b\112\uff7b\113\uff7b\114\uff7b\115\uff7b\001\002\000\102" +
    "\003\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\016\uffa9\020" +
    "\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\032\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\044\uffa9\046\uffa9\060\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\071\uffa9\102\uffa9\104\uffa9\105\uffa9\106\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\001" +
    "\002\000\014\005\073\006\011\007\044\011\046\066\050" +
    "\001\002\000\112\003\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\075\011\077\013\102\014\101\015\100\016\uff7a\020\uff7a" +
    "\022\uff7a\024\uff7a\025\uff7a\026\uff7a\032\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\044\uff7a\046\uff7a\060\uff7a\064\uff7a\065\uff7a" +
    "\066\uff7a\071\uff7a\102\uff7a\104\uff7a\105\uff7a\106\uff7a\110" +
    "\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\115\uff7a\001\002" +
    "\000\004\075\u0151\001\002\000\014\005\073\006\011\007" +
    "\044\011\046\066\050\001\002\000\016\010\075\011\077" +
    "\013\102\014\101\015\100\073\u0153\001\002\000\102\003" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\016\uffa7\020\uffa7" +
    "\022\uffa7\024\uffa7\025\uffa7\026\uffa7\032\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\044\uffa7\046\uffa7\060\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\071\uffa7\102\uffa7\104\uffa7\105\uffa7\106\uffa7\110" +
    "\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\062\002\035\006\062\007\013\014\030\015" +
    "\036\016\041\017\050\023\006\024\007\026\052\027\031" +
    "\030\054\031\024\032\064\033\005\034\004\035\023\036" +
    "\065\037\017\040\034\042\033\046\015\047\051\050\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\035\007\u014a\014\030" +
    "\015\036\016\041\017\050\023\006\024\007\026\052\027" +
    "\031\030\054\031\024\032\064\033\005\034\004\035\023" +
    "\036\065\037\017\040\034\042\033\046\015\047\051\050" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\035\047\u0114\050\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\313\001\001\000\002\001\001\000\010\002\035" +
    "\047\264\050\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\106\001\001\000\002\001\001\000\004\002\105\001\001" +
    "\000\004\002\104\001\001\000\004\002\103\001\001\000" +
    "\004\002\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\146\001\001\000\002\001\001" +
    "\000\004\013\114\001\001\000\004\011\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\165\001\001\000\002\001\001\000\004\002" +
    "\167\001\001\000\002\001\001\000\004\064\171\001\001" +
    "\000\010\002\035\047\172\050\014\001\001\000\002\001" +
    "\001\000\004\073\216\001\001\000\004\071\214\001\001" +
    "\000\004\065\204\001\001\000\004\072\202\001\001\000" +
    "\004\070\200\001\001\000\010\002\035\047\201\050\014" +
    "\001\001\000\002\001\001\000\010\002\035\047\203\050" +
    "\014\001\001\000\002\001\001\000\004\004\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\035\007\212\014\030\015\036" +
    "\016\041\017\050\023\006\024\007\026\052\027\031\030" +
    "\054\031\024\032\064\033\005\034\004\035\023\036\065" +
    "\037\017\040\034\042\033\046\015\047\051\050\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\035" +
    "\047\215\050\014\001\001\000\002\001\001\000\010\002" +
    "\035\047\217\050\014\001\001\000\002\001\001\000\004" +
    "\054\221\001\001\000\060\002\035\007\222\014\030\015" +
    "\036\016\041\017\050\023\006\024\007\026\052\027\031" +
    "\030\054\031\024\032\064\033\005\034\004\035\023\036" +
    "\065\037\017\040\034\042\033\046\015\047\051\050\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\225\001\001\000\002\001\001\000\010\002\035\047\227" +
    "\050\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\233\001\001\000\060\002\035" +
    "\007\234\014\030\015\036\016\041\017\050\023\006\024" +
    "\007\026\052\027\031\030\054\031\024\032\064\033\005" +
    "\034\004\035\023\036\065\037\017\040\034\042\033\046" +
    "\015\047\051\050\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\237\001\001\000\002\001\001\000" +
    "\010\002\035\047\241\050\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\253\001\001\000\002\001\001\000\004\011\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\267\001" +
    "\001\000\004\051\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\273\044\274\001\001\000\006\044" +
    "\306\045\305\001\001\000\002\001\001\000\004\005\276" +
    "\001\001\000\004\052\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\035\007\303" +
    "\014\030\015\036\016\041\017\050\023\006\024\007\026" +
    "\052\027\031\030\054\031\024\032\064\033\005\034\004" +
    "\035\023\036\065\037\017\040\034\042\033\046\015\047" +
    "\051\050\014\001\001\000\002\001\001\000\004\053\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\035\007\312\014\030" +
    "\015\036\016\041\017\050\023\006\024\007\026\052\027" +
    "\031\030\054\031\024\032\064\033\005\034\004\035\023" +
    "\036\065\037\017\040\034\042\033\046\015\047\051\050" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\322\011\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\334\011" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\351\001\001\000\002" +
    "\001\001\000\004\002\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\035\047\367\050\014\001\001\000" +
    "\002\001\001\000\004\067\371\001\001\000\002\001\001" +
    "\000\060\002\035\007\373\014\030\015\036\016\041\017" +
    "\050\023\006\024\007\026\052\027\031\030\054\031\024" +
    "\032\064\033\005\034\004\035\023\036\065\037\017\040" +
    "\034\042\033\046\015\047\051\050\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0104\001\001\000\002\001\001\000\004\011\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\035\007\u010d" +
    "\014\030\015\036\016\041\017\050\023\006\024\007\026" +
    "\052\027\031\030\054\031\024\032\064\033\005\034\004" +
    "\035\023\036\065\037\017\040\034\042\033\046\015\047" +
    "\051\050\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\035\007\u0123\014\030\015\036\016\041\017\050\023" +
    "\006\024\007\026\052\027\031\030\054\031\024\032\064" +
    "\033\005\034\004\035\023\036\065\037\017\040\034\042" +
    "\033\046\015\047\051\050\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\035\007\u0128\014\030\015\036\016\041\017\050" +
    "\023\006\024\007\026\052\027\031\030\054\031\024\032" +
    "\064\033\005\034\004\035\023\036\065\037\017\040\034" +
    "\042\033\046\015\047\051\050\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\u012e\033\u0130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\322\001\001\000\002\001\001\000\010\002\035\047\u013d" +
    "\050\014\001\001\000\004\060\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\035\007\u0141\014\030" +
    "\015\036\016\041\017\050\023\006\024\007\026\052\027" +
    "\031\030\054\031\024\032\064\033\005\034\004\035\023" +
    "\036\065\037\017\040\034\042\033\046\015\047\051\050" +
    "\014\001\001\000\002\001\001\000\004\061\u0143\001\001" +
    "\000\004\041\u0144\001\001\000\002\001\001\000\004\062" +
    "\u0146\001\001\000\002\001\001\000\060\002\035\007\u0148" +
    "\014\030\015\036\016\041\017\050\023\006\024\007\026" +
    "\052\027\031\030\054\031\024\032\064\033\005\034\004" +
    "\035\023\036\065\037\017\040\034\042\033\046\015\047" +
    "\051\050\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\u0151\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
   
    
    public void syntax_error(Symbol s){
        //Interfaz_c3d.notificar_er("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //Interfaz_c3d.notificar_er("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;
    String estados="";
    String conEstados="";
    String alfabeto="";
    String maines="";
    String transicion1="";
    String transicion2="";
    String cad="";
    String cadAutomata="";
    String cadAutomataCorr="";
    private SimuladorArbolBinario simulador = new SimuladorArbolBinario();

    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARA ::= TIPO ID ASIG EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(expleft+1)+", se esperaba una ; para terminar la sentencia");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARA ::= TIPO ID 
            {
              Object RESULT =null;
		int idDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(idDleft+1)+", se esperaba una ; para terminar la sentencia");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECESTADOI ::= EINICIAL ASIG ELEMENTOESTADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(eleft+1)+", falta un ; para terminar la sentencia");
                cadAutomata = cadAutomata+"/estadoInicial=SentenciasElemento.png"+"\n";
                Interfaz_c3d.txt_Automata.setText(cadAutomata);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECESTADOSFIN ::= EFINAL ASIG PAR_A ELEMENTOSESTADOS PAR_C 
            {
              Object RESULT =null;
		int parenCfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parenCfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parenCf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenCfleft+1)+", falta un ; después del ')'");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOSFIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECESTADOSFIN ::= EFINAL PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int parenfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parenfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parenf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
               Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenfleft+1)+", se esperaba una asignacion(=) antes del '('");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOSFIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECESTADOSFIN ::= EFINAL ID ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idesfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idesfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idesf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(idesfleft+1)+", la estructura no utiliza un "+idesf );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOSFIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECTRANSICIONES ::= TRANSICION ASIG PAR_A ELEMENTOSTRANSICION PAR_C 
            {
              Object RESULT =null;
		int parenCtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parenCtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parenCt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenCtleft+1)+", falta un ; después del ')'");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECTRANSICIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECTRANSICIONES ::= TRANSICION PAR_A ELEMENTOSTRANSICION PAR_C PYCOMA 
            {
              Object RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
               Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parentleft+1)+", se esperaba una asignacion(=) antes del '('");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECTRANSICIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECTRANSICIONES ::= TRANSICION ID ASIG PAR_A ELEMENTOSTRANSICION PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idestleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idestright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idest = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(idestleft+1)+", la estructura no utiliza un "+idest );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECTRANSICIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IMPLEFUNCION ::= FUNCION AUTOMATA PAR_A PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
		int parenAfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parenAfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parenAf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenAfleft+1)+", se esperaba un Identificador antes del '('");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECESTADOS ::= ALFABETO ASIG PAR_A ELEMENTOSESTADOS PAR_C 
            {
              Object RESULT =null;
		int alfaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int alfaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String alfa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parenCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parenCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parenC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(alfaleft+1)+", el alfabeto no puede contener contener entre sus valores Estados");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECESTADOS ::= ESTADO PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int parenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object paren = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenleft+1)+", se esperaba una asignacion(=) antes del '('");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECESTADOS ::= ESTADO ID ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ides = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(idesleft+1)+", la estructura no utiliza un "+ides );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECALFABETO ::= ALFABETO ID ASIG PAR_A ELEMENTOSESTADOS PYCOMA 
            {
              Object RESULT =null;
		int estaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int estaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object esta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar_er("Error semántico en la linea "+(estaleft+1)+", los valores no son compatibles con la declaración de un alfabeto");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECALFABETO ::= ALFABETO ID ASIG PAR_A ELEMENTOS PYCOMA 
            {
              Object RESULT =null;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pcoma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(pcomaleft+1)+", se esperaba un ')' antes del  "+pcoma );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECALFABETO ::= ALFABETO ASIG PAR_A ELEMENTOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(asigleft+1)+", se esperaba un Identificador antes del signo  "+asig );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECALFABETO ::= ALFABETO ID ASIG PAR_A ELEMENTOS PAR_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(elemleft+1)+", se esperaba un ; después del ')'" );
                //Interfaz_c3d.mandarRuta("/AlfabetoId=(Elementos).png");
                cadAutomata = cadAutomata+"/AlfabetoId=(Elementos).png"+"\n";
                Interfaz_c3d.txt_Automata.setText(cadAutomata);
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INICIO ::= INI PYCOMA SENTENCIAS FIN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Generador_tmp.reset();
                  
                  Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(finleft+1)+", se esperaba un ; después de Fin" );
                  cadAutomata = cadAutomata+"/inicio;sentenciafin.png"+"\n";
                  Interfaz_c3d.txt_Automata.setText(cadAutomata);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // METODOS ::= ID PAR_A PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                maines=""+id+maines;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // METODOS ::= ID PAR_A PAR_C PYCOMA ENTER METODOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                maines=id+","+maines;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IMPLEOPRINCIPAL ::= OPRINPAL LLAV_A METODOS LLAV_C 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("     MAIN("+maines+")\n");
                Interfaz_c3d.notificarG("IMPLEOPRINCIPAL -> \n OPRINPAL LLAV_A METODOS LLAV_C ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEOPRINCIPAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MOSTRARTABLA ::= MTABLA PAR_A ID PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARTABLA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MOSTRARGRAFICO ::= GRAFICO PAR_A ID PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Interfaz_c3d.notificar("     GRAFICO("+id+")\n");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARGRAFICO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DEFEXPRESION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFEXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENESPECIALES ::= DECALFABETO ENTER EXPRESION ID ASIG PAR_A DEFEXPRESION PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENESPECIALES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IMPLEFUNCION ::= FUNCION ER ID PAR_A PAR_C LLAV_A SENESPECIALES LLAV_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("      FUNCION_"+id+"()\n");

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMPLEFUNCION ::= FUNCION AUTOMATA ID PAR_A PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificarG("      FUNCION_"+id+"()\n");
                if (id.equals("ejemplo1")){
                ImagenAC.getruta("/AuT1BienDelgadoConFinal.png");
                Interfaz_c3d.notificarImgAC();
                }
                if (id.equals("ejemplo2")){
                ImagenAC.getruta("/AuT2BienDelgadoConFinales.png");
                Interfaz_c3d.notificarG("Si entro en la funcion"+id+"\n");
                Interfaz_c3d.notificarImgAC();
                }
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPLEFUNCION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTOSTRANSICION ::= LLAV_A ELEMENTOSESTADOS LLAV_C COMA ELEMENTO COMA LLAV_A ELEMENTOSESTADOS2 LLAV_C 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                
                transicion1="     ({"+estados+"}"+","+e+")  -->  {"+conEstados+"}";
                estados="";
                conEstados="";
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTOSTRANSICION ::= ELEMENTOESTADO COMA ELEMENTO COMA LLAV_A ELEMENTOSESTADOS LLAV_C 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    transicion1="     ("+e1+","+e+")  -->  {"+estados+"}"; 
                    estados="";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTOSTRANSICION ::= LLAV_A ELEMENTOSESTADOS LLAV_C COMA ELEMENTO COMA ELEMENTOESTADO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    transicion1="     ({"+estados+"}"+","+e+")  -->  "+e2; 
                    estados="";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTOSTRANSICION ::= ELEMENTOESTADO COMA ELEMENTO COMA ELEMENTOESTADO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                transicion1="     ("+e1+","+e+")  -->  "+e2; 
                 Interfaz_c3d.notificarG("         DECTRANSICIONES -> \n          TRANSICION -> transicion -> \n            = ( ELEMENTOSTRANSICION -> \n                ELEMENTOESTADO -> "+e1+", ELEMENTO -> "+e+", ELEMENTOESTADO -> "+e2+" );\n"+
                                        "----------------------------------------------------------------------\n");
                
               
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSTRANSICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTOSESTADOS ::= ELEMENTOESTADO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                estados=f+estados;
               
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTOSESTADOS ::= ELEMENTOESTADO COMA ELEMENTOSESTADOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 estados =""+e+c+estados;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTOSESTADOS2 ::= ELEMENTOESTADO2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                conEstados=f+conEstados;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTOSESTADOS2 ::= ELEMENTOESTADO2 COMA ELEMENTOSESTADOS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 conEstados =""+e+c+conEstados;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOSESTADOS2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECTRANSICIONES ::= TRANSICION ASIG PAR_A ELEMENTOSTRANSICION PAR_C PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(transicion1+"\n");
                transicion1="";
                transicion2="";
                estados="";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECTRANSICIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECESTADOSFIN ::= EFINAL ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                
                Interfaz_c3d.notificar("     E_FINALES("+estados+")\n");
                Interfaz_c3d.notificarG("          EFINAL -> estadosFinales -> \n       = (ELEMENTOSESTADO -> "+estados+");\n"+
                                        "----------------------------------------------------------------------\n");
                 estados = "";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOSFIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECESTADOI ::= EINICIAL ASIG ELEMENTOESTADO PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar("     E_INICIAL("+e+")\n");
                Interfaz_c3d.notificarG("         EINICIAL -> estadoInicial -> \n       = ELEMENTOESTADO -> "+e+";\n"+
                                        "----------------------------------------------------------------------\n");
                
                cadAutomataCorr = cadAutomataCorr+"/estadoInicial=SentenciasElemento;.png"+"\n";
                Interfaz_c3d.txt_AutomataCorrecto.setText(cadAutomataCorr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOI",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECESTADOS ::= ESTADO ASIG PAR_A ELEMENTOSESTADOS PAR_C 
            {
              Object RESULT =null;
		int parenCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parenCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parenC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                Interfaz_c3d.notificar("     ESTADOS("+estados+")\n");
                 estados = "";
                Interfaz_c3d.notificar_er("Error de sintaxis en la linea "+(parenCleft+1)+", falta un ; después del ')'");
Interfaz_c3d.notificarG("     DECESTADOS -> Estado = ( "+estados+")(;) ERROR\n");

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECESTADOS ::= ESTADO ASIG PAR_A ELEMENTOSESTADOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificarG("          DECESTADOS -> Estado = ( \n              ELEMENTOSESTADO -> "+estados+" );\n"+
                                        "-----------------------------------------------------------------------\n");
                Interfaz_c3d.notificar("     ESTADOS("+estados+")\n");
                 estados = "";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECESTADOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        alfabeto=f+alfabeto;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTOS ::= ELEMENTO COMA ELEMENTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        alfabeto=""+e+c+alfabeto;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECALFABETO ::= ALFABETO ID ASIG PAR_A ELEMENTOS PAR_C PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Interfaz_c3d.notificar("     ALFABETO("+id+",[ "+alfabeto+" ])\n");
                Interfaz_c3d.notificarG("         DECALFABETO -> \n             ID -> "+id+" = ( ELEMENTOS -> "+alfabeto+"); \n"+
                                        "-----------------------------------------------------------------------\n");
                alfabeto="";
                cadAutomataCorr = cadAutomataCorr+"/AlfabetoId=(Elementos);.png"+"\n";
                Interfaz_c3d.txt_AutomataCorrecto.setText(cadAutomataCorr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECALFABETO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= CHAR1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARA ::= INT1 ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                
                String cad=""+exp;
                boolean hayPunto=false;
                for(int i=0;i<cad.length(); i++ )
                if ( cad.charAt(i) == '.')                          //Detectar si hay un punto decimal en la cadena
                hayPunto=true;
                if((hayPunto)){
                    Interfaz_c3d.notificar_er("Error semantico: En la linea "+(inleft+1)+" columna "+(expright+1)+" tipos incompatibles se esperaba un Entero" );
                }else{
                Interfaz_c3d.notificar(id+" = "+exp+"\n");
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARA ::= FLOTANTE ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //Interfaz_c3d.notificar(t+" Asigna "+exp+" a varibales()");
                
                String cad=""+exp;
                boolean hayPunto=false;
                for( int i=0;i<cad.length(); i++ )
                if ( cad.charAt(i) == '.')                          //Detectar si hay un punto decimal en la cadena
                hayPunto=true;
                if(!(hayPunto)){
                    Interfaz_c3d.notificar_er("Error semantico: En la linea "+(flleft+1)+" columna "+(expright+1)+" tipos incompatibles se esperaba un Flotante" );
                }else{
                Interfaz_c3d.notificar(id+" = "+exp+"\n");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARA ::= TIPO ID PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("Reserva espacio y almacena el id de las variables.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNA ::= ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar(id+"="+exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= PAR_A LOG PAR_C 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = val.aux;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= MENOS EXP 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+sim+val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= DECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= ENTERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP POT EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                cad=cad+val+""+sim+val2+"\n";
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
                Interfaz_c3d.txt_expresion.setText(cad);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP DIV EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                cad=cad+val+""+sim+val2+"\n";
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
                Interfaz_c3d.txt_expresion.setText(cad);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                cad=cad+val+""+sim+val2+"\n";
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
                Interfaz_c3d.txt_expresion.setText(cad);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                cad=cad+val+""+sim+val2+"\n";
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
                Interfaz_c3d.txt_expresion.setText(cad);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                cad=cad+val+""+sim+val2+"\n";
                RESULT=Generador_tmp.genera_tmp(); //sintetizo el temporal 
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2); //imprimo la cadena la operacion
                Interfaz_c3d.txt_expresion.setText(cad);
               
                                    
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_REL ::= NEQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_REL ::= EQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_REL ::= BELOWE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_REL ::= ABOVEE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_REL ::= BELOW 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_REL ::= ABOVE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // REL ::= EXP 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.aux= val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REL ::= EXP OP_REL EXP 
            {
              Atributo_C3D RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true= Generador_tmp.genera_etq();
                RESULT.etq_false= Generador_tmp.genera_etq();
                //imprimimos la condicion de la expresion relacional con su saltos
                Interfaz_c3d.notificar("if "+t1+op+t2+" then goto "+RESULT.etq_true+"\ngoto "+RESULT.etq_false);
                // creamos la cadena temporal solo se usa en XOR
                RESULT.aux= "if "+t1+op+t2+" then goto "+RESULT.etq_false+"\ngoto "+RESULT.etq_true; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOG ::= REL 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOG ::= NOT LOG 
            {
              Atributo_C3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true = rel.etq_false;
                RESULT.etq_false = rel.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOG ::= LOG NAND NT$18 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_false+","+rel2.etq_false;  
                RESULT.etq_false= rel2.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOG ::= LOG XOR NT$17 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(rel1.etq_true+":");
                Interfaz_c3d.notificar(rel2.aux);
                RESULT= new Atributo_C3D();
                RESULT.etq_true =rel2.etq_true;
                RESULT.etq_false=rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOG ::= LOG AND NT$16 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel2.etq_true;  
                RESULT.etq_false= rel1.etq_false+","+rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOG ::= LOG OR NT$15 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_true+","+rel2.etq_true;  
                RESULT.etq_false= rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$15 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE ::= MIENTRAS NT$13 PAR_A LOG PAR_C NT$14 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$13 ::= 
            {
              Object RESULT =null;

                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPER ::= DEC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"-1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPER ::= INC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"+1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= PARA PAR_A INT1 ID NT$10 ASIG EXP PYCOMA NT$11 LOG PYCOMA NT$12 OPER PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar(op);    
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(id+"="+exp); //asigna el valor
                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                heredado=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= SINO NT$9 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar(aux+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT =null;

                aux=Generador_tmp.genera_etq();
                Interfaz_c3d.notificar("goto "+aux);
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= SI PAR_A LOG NT$7 PAR_C LLAV_A SENTENCIAS LLAV_C NT$8 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                heredado=log.etq_false; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$7 ::= 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REPEAT ::= REPETIR LLAV_A NT$5 SENTENCIAS LLAV_C HASTA NT$6 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Interfaz_c3d.notificar(log.etq_false+":");
                    Interfaz_c3d.notificar("goto "+aux);
                    Interfaz_c3d.notificar(log.etq_true+":");
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =null;

                    tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                    display.push(tmp);
                    aux=Generador_tmp.genera_etq();
                    Interfaz_c3d.notificar(aux+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DO_WHILE ::= HACER LLAV_A NT$3 SENTENCIAS LLAV_C MIENTRAS NT$4 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Interfaz_c3d.notificar(log.etq_true+":");
                        Interfaz_c3d.notificar("goto "+aux);
                        Interfaz_c3d.notificar(log.etq_false+":");
                        Interfaz_c3d.notificar(display.peek().et_salida+":");
                        display.pop();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;

                        tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                        display.push(tmp);
                        aux=Generador_tmp.genera_etq();
                        Interfaz_c3d.notificar(aux+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEF ::= DEFECTO NT$2 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //a defecto despues de sus sentencias de una vez se le agrega la etiqueta de salida
                Interfaz_c3d.notificar("goto "+display.peek().et_salida);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$2 ::= 
            {
              Object RESULT =null;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAL ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=dec;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAL ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ent;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // C ::= CASO VAL NT$1 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="if "+heredado+"=="+val+" goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASOS ::= C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASOS ::= CASOS C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SELECT ::= SELEC PAR_A EXP NT$0 PAR_C LLAV_A CASOS DEF LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    Interfaz_c3d.notificar(aux);
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    tmp= new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),2); //generamos las etiquetas de inicio y salida
                    display.push(tmp);
                    Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    heredado=exp; //valor a comparar con cada caso
                    aux=""; //cadena donde llevaremos los saltos condicionales de los casos
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S ::= error LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S ::= CONTINUA PYCOMA 
            {
              Object RESULT =null;
		
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    if(display.peek().tipo==2){
                        Interfaz_c3d.notificar("ERROR: la sentencia envolvnete no permite continue");
                    }else{
                        Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S ::= DETENER PYCOMA 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S ::= DO_WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S ::= REPEAT 
            {
              Object RESULT =null;
		
                 //Interfaz_c3d.notificar(" "); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S ::= SELECT 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= IF 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= FOR 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= ASIGNA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= IMPLEOPRINCIPAL 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" Main()");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= IMPLEFUNCION 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" FUNCION ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= MOSTRARTABLA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= MOSTRARGRAFICO 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" MOSTRAR_GRAFICO() ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= DECTRANSICIONES 
            {
              Object RESULT =null;
		
               // Interfaz_c3d.notificar(" DECLARACION_TRANSICIONES()");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= DECESTADOSFIN 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" DECLARACION_ESTADOS_F()");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= DECESTADOI 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" DECLARACION_ESTADO_I()");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= DECESTADOS 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" DECLARACION_ESTADOS()\n");
                //Interfaz_c3d.notificarG("   SENTENCIA -> \n      DECLARA_ESTADOS ->");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DECALFABETO 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" DECLARACION_ALFABETO()\n");
                //Interfaz_c3d.notificarG("     DECALFABETO -> ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= DECLARA 
            {
              Object RESULT =null;
		
               // Interfaz_c3d.notificar(" DECLARACION() ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(log.etq_true+":\n"+log.etq_false+":");
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= S 
            {
              Object RESULT =null;
		
    Interfaz_c3d.notificarG(" S -> \n");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S SENTENCIAS 
            {
              Object RESULT =null;
		
    Interfaz_c3d.notificarG("SENTENCIAS -> \n    ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INI PYCOMA SENTENCIAS FIN PYCOMA 
            {
              Object RESULT =null;
		
                
                Interfaz_c3d.notificarG("Inicio ->\n Inicio SENTENCIAS Fin  \n");
                Imagen.getruta("/inicio;sentenciafin;.png");
                cadAutomataCorr = cadAutomataCorr+"/inicio;sentenciafin;.png"+"\n";
                Interfaz_c3d.txt_AutomataCorrecto.setText(cadAutomataCorr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS FIN PYCOMA error 
            {
              Object RESULT =null;
		
               Generador_tmp.reset();
               Interfaz_c3d.notificar_er("Error sintactico el programa debe comenzar con la palabra Inicio; ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

